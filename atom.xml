<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>麒麟教育</title>
  
  <subtitle>麒麟成长点点滴滴</subtitle>
  <link href="https://blog.wangk.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.wangk.cn/"/>
  <updated>2021-04-29T04:15:26.666Z</updated>
  <id>https://blog.wangk.cn/</id>
  
  <author>
    <name>麒麟爸</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Docker部署Portainer</title>
    <link href="https://blog.wangk.cn/2021/04/29/Docker%E9%83%A8%E7%BD%B2Portainer/"/>
    <id>https://blog.wangk.cn/2021/04/29/Docker%E9%83%A8%E7%BD%B2Portainer/</id>
    <published>2021-04-29T04:10:40.000Z</published>
    <updated>2021-04-29T04:15:26.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="可视化图形工具Portainer"><a href="#可视化图形工具Portainer" class="headerlink" title="可视化图形工具Portainer"></a>可视化图形工具Portainer</h1><h2 id="Portainer介绍"><a href="#Portainer介绍" class="headerlink" title="Portainer介绍"></a>Portainer介绍</h2><p>Portainer是一个可视化的容器镜像的图形管理工具，利用Portainer可以轻松构建，管理和维护Docker环境。 而且完全免费，基于容器化的安装方式，方便高效部署。官方站点：<a href="http://www.yunweipai.com/go?_=ad9d485327aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlvLw==">https://www.portainer.io/</a></p><h2 id="安装Portainer"><a href="#安装Portainer" class="headerlink" title="安装Portainer"></a>安装Portainer</h2><p>官方安装说明：<a href="http://www.yunweipai.com/go?_=8fe4813824aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlvL2luc3RhbGxhdGlvbi8=">https://www.portainer.io/installation/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ docker search portainer |head -n 3</span><br><span class="line">NAME                             DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED</span><br><span class="line">portainer/portainer              This Repo is now deprecated, use portainer/p…   2067</span><br><span class="line">portainer/portainer-ce           Portainer CE - Making Docker and Kubernetes …   494</span><br><span class="line">root @ wangk.cn <span class="keyword">in</span> ~ [12:12:50]</span><br><span class="line"></span><br><span class="line">$ docker volume create portainer_data</span><br><span class="line">portainer_data</span><br><span class="line">$ docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer</span><br><span class="line">20db26b67b791648c2ef6aee444a5226a9c897ebcf0160050e722dbf4a4906e3</span><br><span class="line">$ docker ps </span><br><span class="line">CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                                            NAMES</span><br><span class="line">20db26b67b79        portainer/portainer   <span class="string">&quot;/portainer&quot;</span>        5 seconds ago       Up 4 seconds        0.0.0.0:8000-&gt;8000/tcp, 0.0.0.0:9000-&gt;9000/tcp   portainer</span><br></pre></td></tr></table></figure><h2 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   </span><br><span class="line">    <span class="attr">portainer:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">portainer/portainer</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9000:9000&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8000:8000&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;$&#123;wwwdata&#125;/docker/portainer:/data&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;可视化图形工具Portainer&quot;&gt;&lt;a href=&quot;#可视化图形工具Portainer&quot; class=&quot;headerlink&quot; title=&quot;可视化图形工具Portainer&quot;&gt;&lt;/a&gt;可视化图形工具Portainer&lt;/h1&gt;&lt;h2 id=&quot;Portainer</summary>
      
    
    
    
    
    <category term="docker" scheme="https://blog.wangk.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>设置阿里云pip源，加速pip更新速度</title>
    <link href="https://blog.wangk.cn/2021/03/15/%E8%AE%BE%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91pip%E6%BA%90%EF%BC%8C%E5%8A%A0%E9%80%9Fpip%E6%9B%B4%E6%96%B0%E9%80%9F%E5%BA%A6/"/>
    <id>https://blog.wangk.cn/2021/03/15/%E8%AE%BE%E7%BD%AE%E9%98%BF%E9%87%8C%E4%BA%91pip%E6%BA%90%EF%BC%8C%E5%8A%A0%E9%80%9Fpip%E6%9B%B4%E6%96%B0%E9%80%9F%E5%BA%A6/</id>
    <published>2021-03-15T15:49:37.000Z</published>
    <updated>2021-03-15T15:51:05.896Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.pip</span><br><span class="line"></span><br><span class="line">cat &gt; ~/.pip/pip.conf &lt;&lt; EOF</span><br><span class="line"></span><br><span class="line">[global]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br><span class="line">index-url=https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="Windows系统"><a href="#Windows系统" class="headerlink" title="Windows系统"></a>Windows系统</h1><p>首先在window的文件夹窗口输入 ： %APPDATA%</p><p>然后创建pip文件夹</p><p>最后创建pip.ini文件，写入如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Linux-系统&quot;&gt;&lt;a href=&quot;#Linux-系统&quot; class=&quot;headerlink&quot; title=&quot;Linux 系统&quot;&gt;&lt;/a&gt;Linux 系统&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="Python" scheme="https://blog.wangk.cn/categories/Python/"/>
    
    
    <category term="Python" scheme="https://blog.wangk.cn/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Tomcat</title>
    <link href="https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2Tomcat/"/>
    <id>https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2Tomcat/</id>
    <published>2021-02-02T01:28:37.000Z</published>
    <updated>2021-03-15T02:34:38.226Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-yaml文件配置"><a href="#docker-compose-yaml文件配置" class="headerlink" title="docker-compose.yaml文件配置"></a>docker-compose.yaml文件配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">A:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">tomcat:latest</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span>  <span class="string">$&#123;wwwdata&#125;/docker/webapps:/usr/local/tomcat/webapps</span></span><br><span class="line">            <span class="bullet">-</span>  <span class="string">$&#123;wwwconf&#125;/etc/tomcat/tomcat-users.xml:/usr/local/tomcat/conf/tomcat-users.xml</span></span><br></pre></td></tr></table></figure><h1 id="tomcat-users-xml配置文件"><a href="#tomcat-users-xml配置文件" class="headerlink" title="tomcat-users.xml配置文件"></a>tomcat-users.xml配置文件</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-script&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-jmx&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-status&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-script&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;root&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,manager-script,manager-jmx,manager-status,admin-script,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-yaml文件配置&quot;&gt;&lt;a href=&quot;#docker-compose-yaml文件配置&quot; class=&quot;headerlink&quot; title=&quot;docker-compose.yaml文件配置&quot;&gt;&lt;/a&gt;docker-compose.ya</summary>
      
    
    
    
    <category term="docker" scheme="https://blog.wangk.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.wangk.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署elasticsearch</title>
    <link href="https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2elasticsearch/"/>
    <id>https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2elasticsearch/</id>
    <published>2021-02-02T01:25:27.000Z</published>
    <updated>2021-03-15T02:34:38.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-yaml文件配置"><a href="#docker-compose-yaml文件配置" class="headerlink" title="docker-compose.yaml文件配置"></a>docker-compose.yaml文件配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   </span><br><span class="line">    <span class="attr">elasticsearch:</span></span><br><span class="line">        <span class="comment">#build:</span></span><br><span class="line">        <span class="comment">#    context: Dockerfile</span></span><br><span class="line">        <span class="comment">#    dockerfile: elasticsearch</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">wangk/elasticsearch</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">elasticsearch</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9200:9200&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9300:9300&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;$&#123;wwwdata&#125;/docker/elasticsearch:/usr/share/elasticsearch/data&quot;</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">discovery.type=single-node</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">elastichd:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">containerize/elastichd</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">elastichd</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;9800:9800&quot;</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;elasticsearch&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-yaml文件配置&quot;&gt;&lt;a href=&quot;#docker-compose-yaml文件配置&quot; class=&quot;headerlink&quot; title=&quot;docker-compose.yaml文件配置&quot;&gt;&lt;/a&gt;docker-compose.ya</summary>
      
    
    
    
    <category term="docker" scheme="https://blog.wangk.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.wangk.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署frps</title>
    <link href="https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2frps/"/>
    <id>https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2frps/</id>
    <published>2021-02-02T01:13:47.000Z</published>
    <updated>2021-03-15T02:34:38.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-yaml文件配置"><a href="#docker-compose-yaml文件配置" class="headerlink" title="docker-compose.yaml文件配置"></a>docker-compose.yaml文件配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   </span><br><span class="line">    <span class="attr">frps:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">snowdreamtech/frps</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">frps</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;17000:17000&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;27500:17500&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;10022:10022&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;10080:10080&quot;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;10443:10443&quot;</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;$&#123;wwwconf&#125;/etc/frps/frps.ini:/etc/frp/frps.ini&quot;</span></span><br></pre></td></tr></table></figure><h1 id="frps-ini配置文件"><a href="#frps-ini配置文件" class="headerlink" title="frps.ini配置文件"></a>frps.ini配置文件</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">17000</span></span><br><span class="line"><span class="attr">token</span> = admin</span><br><span class="line"><span class="attr">vhost_http_port</span> = <span class="number">10080</span></span><br><span class="line"><span class="attr">vhost_https_port</span> = <span class="number">10443</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">dashboard_port</span> = <span class="number">17500</span></span><br><span class="line"><span class="attr">dashboard_user</span> = admin</span><br><span class="line"><span class="attr">dashboard_pwd</span> = admin</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="attr">tcp_mux</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">max_pool_count</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><h1 id="frpc配置文件"><a href="#frpc配置文件" class="headerlink" title="frpc配置文件"></a>frpc配置文件</h1><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">127.17</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">17000</span></span><br><span class="line"><span class="attr">token</span> = admin</span><br><span class="line"></span><br><span class="line"><span class="section">[web]</span></span><br><span class="line"><span class="attr">type</span> = http</span><br><span class="line"><span class="attr">local_port</span> = <span class="number">8000</span></span><br><span class="line"><span class="attr">custom_domains</span> = www.wangk.cn</span><br><span class="line"></span><br><span class="line"><span class="section">[ssh]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">local_ip</span> = <span class="number">127.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">22</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">6000</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="frpc启动脚本"><a href="#frpc启动脚本" class="headerlink" title="frpc启动脚本"></a>frpc启动脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><h1 id="外网访问"><a href="#外网访问" class="headerlink" title="外网访问"></a>外网访问</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.wangk.cn:10080</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-yaml文件配置&quot;&gt;&lt;a href=&quot;#docker-compose-yaml文件配置&quot; class=&quot;headerlink&quot; title=&quot;docker-compose.yaml文件配置&quot;&gt;&lt;/a&gt;docker-compose.ya</summary>
      
    
    
    
    <category term="docker" scheme="https://blog.wangk.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.wangk.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署Lnmp</title>
    <link href="https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2Lnmp/"/>
    <id>https://blog.wangk.cn/2021/02/02/Docker%E9%83%A8%E7%BD%B2Lnmp/</id>
    <published>2021-02-02T01:13:47.000Z</published>
    <updated>2021-03-18T12:05:55.290Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;3&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">   </span><br><span class="line">    nginx:</span><br><span class="line">        image: wangk/nginx</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - $&#123;nginx_port_80&#125;:80</span><br><span class="line">            - $&#123;nginx_port_443&#125;:443</span><br><span class="line">            - $&#123;nginx_port_80_other&#125;:80</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;$&#123;workspace&#125;:$&#123;workspace&#125;&quot;</span><br><span class="line">            - &quot;$&#123;wwwconf&#125;/etc/docker:/etc/nginx&quot;</span><br><span class="line">    mysql:</span><br><span class="line">        image: wangk/mysql</span><br><span class="line">        container_name: mysql</span><br><span class="line">        restart: always</span><br><span class="line">        environment:</span><br><span class="line">            MYSQL_ROOT_PASSWORD: $&#123;MYSQL_ROOT_PASSWORD&#125;</span><br><span class="line">            TZ: $&#123;WORKSPACE_TIMEZONE&#125;</span><br><span class="line">        command:</span><br><span class="line">            --default_authentication_plugin=mysql_native_password</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;$&#123;wwwdata&#125;/docker/mysql:/var/lib/mysql&quot;</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;$&#123;mysql_port_default&#125;:3306&quot;</span><br><span class="line">    php80:</span><br><span class="line">        image: wangk/php:8.0-fpm</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;$&#123;php80_fpm_port&#125;:9000&quot;</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;$&#123;workspace&#125;:$&#123;workspace&#125;&quot;</span><br><span class="line">    php74:</span><br><span class="line">        image: wangk/php:7.4-fpm</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;$&#123;php74_fpm_port&#125;:9000&quot;</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;$&#123;workspace&#125;:$&#123;workspace&#125;&quot;</span><br><span class="line">    php73:</span><br><span class="line">        image: wangk/php:7.3-fpm</span><br><span class="line">        restart: always</span><br><span class="line">        ports:</span><br><span class="line">            - &quot;$&#123;php73_fpm_port&#125;:9000&quot;</span><br><span class="line">        volumes:</span><br><span class="line">            - &quot;$&#123;workspace&#125;:$&#123;workspace&#125;&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;</summary>
      
    
    
    
    <category term="docker" scheme="https://blog.wangk.cn/categories/docker/"/>
    
    
    <category term="docker" scheme="https://blog.wangk.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>PHP 7.4 新特性</title>
    <link href="https://blog.wangk.cn/2020/01/21/PHP-7-4-%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <id>https://blog.wangk.cn/2020/01/21/PHP-7-4-%E6%96%B0%E7%89%B9%E6%80%A7/</id>
    <published>2020-01-21T07:00:31.000Z</published>
    <updated>2021-03-15T02:34:38.231Z</updated>
    
    <content type="html"><![CDATA[<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>预加载的实现理论上是可以为 PHP 带来很大的性能提升的。比如说：现在传统的 PHP 框架或者项目，都是有一次请求就加载和重新编译一次文件的。预加载的实现使得我们可以直接将 PHP 文件加载到内存中，并一次来永驻内存来应对后续的请求。（跟 swoole 有点像了？）</p><p>不过预加载也会带来一点机器内存要求和一些损耗，你还需要注意的是，每次在更新完 PHP 文件之后，你需要重启服务才可以使得新的 PHP 文件生效。</p><h2 id="属性类型限定"><a href="#属性类型限定" class="headerlink" title="属性类型限定"></a>属性类型限定</h2><p>在定义类属性的时候，你可以限定属性的类型 string boolean 或者是一个类的实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeiXue</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> Foo <span class="variable">$foo</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类型限定"><a href="#类型限定" class="headerlink" title="类型限定"></a>类型限定</h2><p>其实类型限定在 PHP 很早之前就支持了，只不过在 7.4 版本之后，PHP 做得更好了，我们来看两个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parents</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parents</span> </span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">covariantReturnTypes</span>(<span class="params"></span>): <span class="title">Parents</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">covariantReturnTypes</span>(<span class="params"></span>): <span class="title">Child</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者下面这个例子你就很熟悉了：参数类型限定</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">contraVariantArguments</span>(<span class="params">Child <span class="variable">$child</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">contraVariantArguments</span>(<span class="params">Parents <span class="variable">$parent</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">/* … */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="外部函数接口"><a href="#外部函数接口" class="headerlink" title="外部函数接口"></a>外部函数接口</h2><p>外部函数接口（Foreign Function Interface）总的来说就是允许你调用 C 代码，也就是说，最好的应用场景可能就是：你以后写 PHP 的扩展就可直接用 PHP 来写了！</p><p>不过需要注意的是：这目前来说还是比较复杂的，你最好还是有点 C 语言的基础。</p><h2 id="新的-Null-三元操作符"><a href="#新的-Null-三元操作符" class="headerlink" title="新的 Null 三元操作符"></a>新的 Null 三元操作符</h2><p>以前我们可能会这样写：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;date&#x27;</span>] = <span class="variable">$data</span>[<span class="string">&#x27;date&#x27;</span>] ?? <span class="keyword">new</span> DateTime();</span><br></pre></td></tr></table></figure><p>PHP 7.4 之后你可以这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span>[<span class="string">&#x27;date&#x27;</span>] ??= <span class="keyword">new</span> DateTime();</span><br></pre></td></tr></table></figure><h2 id="自定义对象序列化"><a href="#自定义对象序列化" class="headerlink" title="自定义对象序列化"></a>自定义对象序列化</h2><p>在 PHP 7.4 的时候，增加了 __serialize 和 __unserialize 这两个魔术方法，你可以用来自定义对象的序列化。</p><h2 id="新增-mb-str-split-函数"><a href="#新增-mb-str-split-函数" class="headerlink" title="新增 mb_str_split 函数"></a>新增 mb_str_split 函数</h2><p>这个函数就是 str_split 函数的 mb (multi bytes) 版本，跟你接触过的 mb_substr 和 substr 是同理的。</p><h2 id="PEAR-不再默认开启PEAR-不再默认开启PEAR-不再默认开启"><a href="#PEAR-不再默认开启PEAR-不再默认开启PEAR-不再默认开启" class="headerlink" title="PEAR 不再默认开启PEAR 不再默认开启PEAR 不再默认开启"></a>PEAR 不再默认开启PEAR 不再默认开启PEAR 不再默认开启</h2><p>由于 PEAR 的开发已经很久没有活跃过了，PHP 官方团队决定移除 PEAR 的默认开启。</p><h2 id="废除-ext-wwdx"><a href="#废除-ext-wwdx" class="headerlink" title="废除 ext/wwdx"></a>废除 ext/wwdx</h2><p>此种数据交换格式貌似从来都没有一个行业标准，所以现在也是该它们退休的时候了。</p><p>最后，你需要注意 PHP 7.4 的向后不兼容特性，可以通过此链接来查看详细内容：<a href="https://github.com/php/php-src/blob/PHP-7.4/UPGRADING">https://github.com/php/php-src/blob/PHP-7.4/UPGRADING</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;预加载&quot;&gt;&lt;a href=&quot;#预加载&quot; class=&quot;headerlink&quot; title=&quot;预加载&quot;&gt;&lt;/a&gt;预加载&lt;/h2&gt;&lt;p&gt;预加载的实现理论上是可以为 PHP 带来很大的性能提升的。比如说：现在传统的 PHP 框架或者项目，都是有一次请求就加载和重新编译一</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>语义化版本</title>
    <link href="https://blog.wangk.cn/2020/01/21/%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/"/>
    <id>https://blog.wangk.cn/2020/01/21/%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/</id>
    <published>2020-01-21T06:50:21.000Z</published>
    <updated>2021-03-15T02:34:38.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">主版本号：当你做了不兼容的 API 修改，</span><br><span class="line">次版本号：当你做了向下兼容的功能性新增，</span><br><span class="line">修订号：当你做了向下兼容的问题修正。</span><br></pre></td></tr></table></figure><p>先行版本号及版本编译元数据可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在软件管理的领域里存在着被称作“依赖地狱”的死亡之谷，系统规模越大，加入的包越多，你就越有可能在未来的某一天发现自己已深陷绝望之中。</p><p>在依赖高的系统中发布新版本包可能很快会成为噩梦。如果依赖关系过高，可能面临版本控制被锁死的风险（必须对每一个依赖包改版才能完成某次升级）。而如果依赖关系过于松散，又将无法避免版本的混乱（假设兼容于未来的多个版本已超出了合理数量）。当你专案的进展因为版本依赖被锁死或版本混乱变得不够简便和可靠，就意味着你正处于依赖地狱之中。</p><p>作为这个问题的解决方案之一，我提议用一组简单的规则及条件来约束版本号的配置和增长。这些规则是根据（但不局限于）已经被各种封闭、开放源码软件所广泛使用的惯例所设计。为了让这套理论运作，你必须先有定义好的公共 API 。这可以透过文件定义或代码强制要求来实现。无论如何，这套 API 的清楚明了是十分重要的。一旦你定义了公共 API，你就可以透过修改相应的版本号来向大家说明你的修改。考虑使用这样的版本号格式：X.Y.Z （主版本号.次版本号.修订号）修复问题但不影响API 时，递增修订号；API 保持向下兼容的新增及修改时，递增次版本号；进行不向下兼容的修改时，递增主版本号。</p><p>我称这套系统为“语义化的版本控制”，在这套约定下，版本号及其更新方式包含了相邻版本间的底层代码和修改内容的信息。</p><h2 id="语义化版本控制规范（SemVer）"><a href="#语义化版本控制规范（SemVer）" class="headerlink" title="语义化版本控制规范（SemVer）"></a>语义化版本控制规范（SemVer）</h2><p>以下关键词 MUST、MUST NOT、REQUIRED、SHALL、SHALL NOT、SHOULD、SHOULD NOT、 RECOMMENDED、MAY、OPTIONAL 依照 RFC 2119 的叙述解读。（译注：为了保持语句顺畅， 以下文件遇到的关键词将依照整句语义进行翻译，在此先不进行个别翻译。）</p><p> 1、使用语义化版本控制的软件必须（MUST）定义公共 API。该 API 可以在代码中被定义或出现于严谨的文件内。无论何种形式都应该力求精确且完整。</p><p>2、标准的版本号必须（MUST）采用 X.Y.Z 的格式，其中 X、Y 和 Z 为非负的整数，且禁止（MUST NOT）在数字前方补零。X 是主版本号、Y 是次版本号、而 Z 为修订号。每个元素必须（MUST）以数值来递增。例如：1.9.1 -&gt; 1.10.0 -&gt; 1.11.0。</p><p>3、标记版本号的软件发行后，禁止（MUST NOT）改变该版本软件的内容。任何修改都必须（MUST）以新版本发行。</p><p>4、主版本号为零（0.y.z）的软件处于开发初始阶段，一切都可能随时被改变。这样的公共 API 不应该被视为稳定版4、。</p><p>5、1.0.0 的版本号用于界定公共 API 的形成。这一版本之后所有的版本号更新都基于公共 API 及其修改内容。</p><p>6、修订号 Z（x.y.Z | x &gt; 0）必须（MUST）在只做了向下兼容的修正时才递增。这里的修正指的是针对不正确结果而进行的内部修改。</p><p>7、次版本号 Y（x.Y.z | x &gt; 0）必须（MUST）在有向下兼容的新功能出现时递增。在任何公共 API 的功能被标记为弃用时也必须（MUST）递增。也可以（MAY）在内部程序有大量新功能或改进被加入时递增，其中可以（MAY）包括修订级别的改变。每当次版本号递增时，修订号必须（MUST）归零。</p><p>8、主版本号 X（X.y.z | X &gt; 0）必须（MUST）在有任何不兼容的修改被加入公共 API 时递增。其中可以（MAY）包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号必须（MUST）归零。</p><p>9、先行版本号可以（MAY）被标注在修订版之后，先加上一个连接号再加上一连串以句点分隔的标识符来修饰。标识符必须（MUST）由 ASCII 字母数字和连接号 [0-9A-Za-z-] 组成，且禁止（MUST NOT）留白。数字型的标识符禁止（MUST NOT）在前方补零。先行版的优先级低于相关联的标准版本。被标上先行版本号则表示这个版本并非稳定而且可能无法满足预期的兼容性需求。范例：1.0.0-alpha、1.0.0-alpha.1、1.0.0-0.3.7、1.0.0-x.7.z.92。</p><p>10、版本编译元数据可以（MAY）被标注在修订版或先行版本号之后，先加上一个加号再加上一连串以句点分隔的标识符来修饰。标识符必须（MUST）由 ASCII 字母数字和连接号 [0-9A-Za-z-] 组成，且禁止（MUST NOT）留白。当判断版本的优先层级时，版本编译元数据可（SHOULD）被忽略。因此当两个版本只有在版本编译元数据有差别时，属于相同的优先层级。范例：1.0.0-alpha+001、1.0.0+20130313144700、1.0.0-beta+exp.sha.5114f85。</p><p>11、版本的优先层级指的是不同版本在排序时如何比较。判断优先层级时，必须（MUST）把版本依序拆分为主版本号、次版本号、修订号及先行版本号后进行比较（版本编译元数据不在这份比较的列表中）。由左到右依序比较每个标识符，第一个差异值用来决定优先层级：主版本号、次版本号及修订号以数值比较，例如：1.0.0 &lt; 2.0.0 &lt; 2.1.0 &lt; 2.1.1。当主版本号、次版本号及修订号都相同时，改以优先层级比较低的先行版本号决定。例如：1.0.0-alpha &lt; 1.0.0。有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级必须（MUST）透过由左到右的每个被句点分隔的标识符来比较，直到找到一个差异值后决定：只有数字的标识符以数值高低比较，有字母或连接号时则逐字以 ASCII 的排序来比较。数字的标识符比非数字的标识符优先层级低。若开头的标识符都相同时，栏位比较多的先行版本号优先层级比较高。范例：1.0.0-alpha &lt; 1.0.0-alpha.1 &lt; 1.0.0-alpha.beta &lt; 1.0.0-beta &lt; 1.0.0-beta.2 &lt; 1.0.0-beta.11 &lt; 1.0.0-rc.1 &lt; 1.0.0。</p><h2 id="为什么要使用语义化的版本控制？"><a href="#为什么要使用语义化的版本控制？" class="headerlink" title="为什么要使用语义化的版本控制？"></a>为什么要使用语义化的版本控制？</h2><p>这并不是一个新的或者革命性的想法。实际上，你可能已经在做一些近似的事情了。问题在于只是“近似”还不够。如果没有某个正式的规范可循，版本号对于依赖的管理并无实质意义。将上述的想法命名并给予清楚的定义，让你对软件使用者传达意向变得容易。一旦这些意向变得清楚，弹性（但又不会太弹性）的依赖规范就能达成。</p><p>举个简单的例子就可以展示语义化的版本控制如何让依赖地狱成为过去。假设有个名为“救火车”的函式库，它需要另一个名为“梯子”并已经有使用语义化版本控制的包。当救火车创建时，梯子的版本号为 3.1.0。因为救火车使用了一些版本 3.1.0 所新增的功能， 你可以放心地指定依赖于梯子的版本号大等于 3.1.0 但小于 4.0.0。这样，当梯子版本 3.1.1 和 3.2.0 发布时，你可以将直接它们纳入你的包管理系统，因为它们能与原有依赖的软件兼容。</p><p>作为一位负责任的开发者，你理当确保每次包升级的运作与版本号的表述一致。现实世界是复杂的，我们除了提高警觉外能做的不多。你所能做的就是让语义化的版本控制为你提供一个健全的方式来发行以及升级包，而无需推出新的依赖包，节省你的时间及烦恼。</p><p>如果你对此认同，希望立即开始使用语义化版本控制，你只需声明你的函式库正在使用它并遵循这些规则就可以了。请在你的 README 文件中保留此页连结，让别人也知道这些规则并从中受益。</p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="在-0-y-z-初始开发阶段，我该如何进行版本控制？"><a href="#在-0-y-z-初始开发阶段，我该如何进行版本控制？" class="headerlink" title="在 0.y.z 初始开发阶段，我该如何进行版本控制？"></a>在 0.y.z 初始开发阶段，我该如何进行版本控制？</h3><p>最简单的做法是以 0.1.0 作为你的初始化开发版本，并在后续的每次发行时递增次版本号。</p><h3 id="如何判断发布-1-0-0-版本的时机？"><a href="#如何判断发布-1-0-0-版本的时机？" class="headerlink" title="如何判断发布 1.0.0 版本的时机？"></a>如何判断发布 1.0.0 版本的时机？</h3><p>当你的软件被用于正式环境，它应该已经达到了 1.0.0 版。如果你已经有个稳定的 API 被使用者依赖，也会是 1.0.0 版。如果你很担心向下兼容的问题，也应该算是 1.0.0 版了。</p><h3 id="这不会阻碍快速开发和迭代吗？"><a href="#这不会阻碍快速开发和迭代吗？" class="headerlink" title="这不会阻碍快速开发和迭代吗？"></a>这不会阻碍快速开发和迭代吗？</h3><p>主版本号为零的时候就是为了做快速开发。如果你每天都在改变 API，那么你应该仍在主版本号为零的阶段（0.y.z），或是正在下个主版本的独立开发分支中。</p><h3 id="对于公共-API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到-42-0-0-版？"><a href="#对于公共-API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到-42-0-0-版？" class="headerlink" title="对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？"></a>对于公共 API，若即使是最小但不向下兼容的改变都需要产生新的主版本号，岂不是很快就达到 42.0.0 版？</h3><p>这是开发的责任感和前瞻性的问题。不兼容的改变不应该轻易被加入到有许多依赖代码的软件中。升级所付出的代价可能是巨大的。要递增主版本号来发行不兼容的改版，意味着你必须为这些改变所带来的影响深思熟虑，并且评估所涉及的成本及效益比。</p><h3 id="为整个公共-API-写文件太费事了！"><a href="#为整个公共-API-写文件太费事了！" class="headerlink" title="为整个公共 API 写文件太费事了！"></a>为整个公共 API 写文件太费事了！</h3><p>为供他人使用的软件编写适当的文件，是你作为一名专业开发者应尽的职责。保持专案高效一个非常重要的部份是掌控软件的复杂度，如果没有人知道如何使用你的软件或不知道哪些函数的调用是可靠的，要掌控复杂度会是困难的。长远来看，使用语义化版本控制以及对于公共 API 有良好规范的坚持，可以让每个人及每件事都运行顺畅。</p><h3 id="万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？"><a href="#万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？" class="headerlink" title="万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？"></a>万一不小心把一个不兼容的改版当成了次版本号发行了该怎么办？</h3><p>一旦发现自己破坏了语义化版本控制的规范，就要修正这个问题，并发行一个新的次版本号来更正这个问题并且恢复向下兼容。即使是这种情况，也不能去修改已发行的版本。可以的话，将有问题的版本号记录到文件中，告诉使用者问题所在，让他们能够意识到这是有问题的版本。</p><h3 id="如果我更新了自己的依赖但没有改变公共-API-该怎么办？"><a href="#如果我更新了自己的依赖但没有改变公共-API-该怎么办？" class="headerlink" title="如果我更新了自己的依赖但没有改变公共 API 该怎么办？"></a>如果我更新了自己的依赖但没有改变公共 API 该怎么办？</h3><p>由于没有影响到公共 API，这可以被认定是兼容的。若某个软件和你的包有共同依赖，则它会有自己的依赖规范，作者也会告知可能的冲突。要判断改版是属于修订等级或是次版等级，是依据你更新的依赖关系是为了修复问题或是加入新功能。对于后者，我经常会预期伴随着更多的代码，这显然会是一个次版本号级别的递增。</p><h3 id="如果我变更了公共-API-但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）"><a href="#如果我变更了公共-API-但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）" class="headerlink" title="如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）"></a>如果我变更了公共 API 但无意中未遵循版本号的改动怎么办呢？（意即在修订等级的发布中，误将重大且不兼容的改变加到代码之中）</h3><p>自行做最佳的判断。如果你有庞大的使用者群在依照公共 API 的意图而变更行为后会大受影响，那么最好做一次主版本的发布，即使严格来说这个修复仅是修订等级的发布。记住， 语义化的版本控制就是透过版本号的改变来传达意义。若这些改变对你的使用者是重要的，那就透过版本号来向他们说明。</p><h3 id="我该如何处理即将弃用的功能？"><a href="#我该如何处理即将弃用的功能？" class="headerlink" title="我该如何处理即将弃用的功能？"></a>我该如何处理即将弃用的功能？</h3><p>弃用现存的功能是软件开发中的家常便饭，也通常是向前发展所必须的。当你弃用部份公共 API 时，你应该做两件事：（1）更新你的文件让使用者知道这个改变，（2）在适当的时机将弃用的功能透过新的次版本号发布。在新的主版本完全移除弃用功能前，至少要有一个次版本包含这个弃用信息，这样使用者才能平顺地转移到新版 API。</p><h3 id="语义化版本对于版本的字串长度是否有限制呢？"><a href="#语义化版本对于版本的字串长度是否有限制呢？" class="headerlink" title="语义化版本对于版本的字串长度是否有限制呢？"></a>语义化版本对于版本的字串长度是否有限制呢？</h3><p>没有，请自行做适当的判断。举例来说，长到 255 个字元的版本已过度夸张。再者，特定的系统对于字串长度可能会有他们自己的限制。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose Redis主从配置</title>
    <link href="https://blog.wangk.cn/2020/01/17/docker-compose-Redis%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.wangk.cn/2020/01/17/docker-compose-Redis%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-17T06:28:19.000Z</published>
    <updated>2021-03-15T02:34:38.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-yaml文件配置"><a href="#docker-compose-yaml文件配置" class="headerlink" title="docker-compose.yaml文件配置"></a>docker-compose.yaml文件配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">        <span class="attr">external:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">wangk.cn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">redis-master:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">            <span class="string">redis-server</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;DATA_PATH&#125;/redis-master:/data</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">default:</span></span><br><span class="line">                <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.201</span></span><br><span class="line">    <span class="attr">redis-slave:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">            <span class="string">redis-server</span> <span class="string">--slaveof</span> <span class="string">redis-master</span> <span class="number">6379</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;DATA_PATH&#125;/redis-slave:/data</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis-master</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">default:</span></span><br><span class="line">                <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.202</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-yaml文件配置&quot;&gt;&lt;a href=&quot;#docker-compose-yaml文件配置&quot; class=&quot;headerlink&quot; title=&quot;docker-compose.yaml文件配置&quot;&gt;&lt;/a&gt;docker-compose.ya</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose数据库主从配置</title>
    <link href="https://blog.wangk.cn/2020/01/17/docker-compose%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.wangk.cn/2020/01/17/docker-compose%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%BB%E4%BB%8E%E9%85%8D%E7%BD%AE/</id>
    <published>2020-01-17T06:16:37.000Z</published>
    <updated>2021-03-15T02:34:38.236Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose-yaml文件配置"><a href="#docker-compose-yaml文件配置" class="headerlink" title="docker-compose.yaml文件配置"></a>docker-compose.yaml文件配置</h1><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.7&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">        <span class="attr">external:</span></span><br><span class="line">            <span class="attr">name:</span> <span class="string">wangk.cn</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">mysql-master:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:8</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=$&#123;WORKSPACE_TIMEZONE&#125;</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">            <span class="string">--default_authentication_plugin=mysql_native_password</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;DATA_PATH&#125;/mysql-master:/var/lib/mysql</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;DATA_PATH&#125;/mysql:/data/wwwdata</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;CONFIG_PATH&#125;/mysql/master.cnf:/etc/mysql/conf.d/master.cnf</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">default:</span></span><br><span class="line">                <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.151</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">mysql-slave:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">mysql:8</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD&#125;</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">TZ=$&#123;WORKSPACE_TIMEZONE&#125;</span></span><br><span class="line">        <span class="attr">command:</span></span><br><span class="line">            <span class="string">--default_authentication_plugin=mysql_native_password</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;DATA_PATH&#125;/mysql-slave:/var/lib/mysql</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;DATA_PATH&#125;/mysql:/data/wwwdata</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">$&#123;CONFIG_PATH&#125;/mysql/slave.cnf:/etc/mysql/conf.d/slave.cnf</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">mysql-master</span></span><br><span class="line">        <span class="attr">networks:</span></span><br><span class="line">            <span class="attr">default:</span></span><br><span class="line">                <span class="attr">ipv4_address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.152</span></span><br></pre></td></tr></table></figure><h1 id="主从库设置"><a href="#主从库设置" class="headerlink" title="主从库设置"></a>主从库设置</h1><h2 id="master-cnf配置"><a href="#master-cnf配置" class="headerlink" title="master.cnf配置"></a>master.cnf配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">log-bin&#x3D;mysql-bin</span><br><span class="line">server-id&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="slave-cnf配置"><a href="#slave-cnf配置" class="headerlink" title="slave.cnf配置"></a>slave.cnf配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">server-id&#x3D;2</span><br></pre></td></tr></table></figure><h2 id="备份主服务器的数据"><a href="#备份主服务器的数据" class="headerlink" title="备份主服务器的数据"></a>备份主服务器的数据</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump --all-databases --lock-all-tables &gt; /data/wwwdata/master_db.sql</span><br></pre></td></tr></table></figure><h2 id="创建同步账号"><a href="#创建同步账号" class="headerlink" title="创建同步账号"></a>创建同步账号</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;slave&#x27;</span>;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;slave&#x27;</span>@<span class="string">&#x27;%&#x27;</span> <span class="keyword">WITH</span> <span class="keyword">GRANT</span> OPTION;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="keyword">SHOW</span> MASTER STATUS;</span><br></pre></td></tr></table></figure><p>##从库导入主库数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql &lt; /data/wwwdata/master_db.sql</span><br></pre></td></tr></table></figure><h2 id="设置主节点"><a href="#设置主节点" class="headerlink" title="设置主节点"></a>设置主节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST&#x3D;&#39;mysql-master&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;slave&#39;,</span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;slave&#39;,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;binlog.000003&#39;,</span><br><span class="line">MASTER_LOG_POS&#x3D;997;</span><br></pre></td></tr></table></figure><h2 id="开启主从同步"><a href="#开启主从同步" class="headerlink" title="开启主从同步"></a>开启主从同步</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span> slave;</span><br><span class="line"><span class="keyword">SHOW</span> SLAVE STATUS\G;</span><br></pre></td></tr></table></figure><h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><h2 id="每次容器重启从库启动失败。执行"><a href="#每次容器重启从库启动失败。执行" class="headerlink" title="每次容器重启从库启动失败。执行"></a>每次容器重启从库启动失败。执行</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave;</span><br><span class="line"><span class="keyword">start</span> slave;</span><br></pre></td></tr></table></figure><h2 id="或执行如下"><a href="#或执行如下" class="headerlink" title="或执行如下"></a>或执行如下</h2><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose exec mysql-slave mysql -e <span class="string">&quot;stop slave;reset slave; start slave;&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;docker-compose-yaml文件配置&quot;&gt;&lt;a href=&quot;#docker-compose-yaml文件配置&quot; class=&quot;headerlink&quot; title=&quot;docker-compose.yaml文件配置&quot;&gt;&lt;/a&gt;docker-compose.ya</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>申请OneDrive 5T 网盘</title>
    <link href="https://blog.wangk.cn/2019/08/01/%E7%94%B3%E8%AF%B7OneDrive%205T%20%E7%BD%91%E7%9B%98/"/>
    <id>https://blog.wangk.cn/2019/08/01/%E7%94%B3%E8%AF%B7OneDrive%205T%20%E7%BD%91%E7%9B%98/</id>
    <published>2019-08-01T03:42:30.000Z</published>
    <updated>2021-03-15T02:34:38.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="临时邮箱"><a href="#临时邮箱" class="headerlink" title="临时邮箱"></a>临时邮箱</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">2019年5月10日09:22:03 更新</span><br><span class="line">http:&#x2F;&#x2F;xkx.me&#x2F;</span><br><span class="line"></span><br><span class="line">2019年5月8日10:36:13 更新</span><br><span class="line">http:&#x2F;&#x2F;office2016.live&#x2F;</span><br><span class="line"></span><br><span class="line">2019年5月6日16:35:35 更新</span><br><span class="line">http:&#x2F;&#x2F;onedrive.readmail.net&#x2F;</span><br><span class="line"></span><br><span class="line">2019年5月3日17:23:00 更新</span><br><span class="line">http:&#x2F;&#x2F;my365.tw&#x2F;</span><br><span class="line"></span><br><span class="line">2019年4月29日09:12:15 更新</span><br><span class="line">http:&#x2F;&#x2F;24mail.chacuo.net&#x2F;</span><br><span class="line">特别提醒：这个邮箱只需复制邮箱ID，不需要复制@chacuo.net，注册的时候请使用邮箱ID+@stu.mao.office.gy 即可！</span><br><span class="line">申请成功后需要加入N软的组（NRuan.com）内，否则会被删除：https:&#x2F;&#x2F;account.activedirectory.windowsazure.com&#x2F;r#&#x2F;groups</span><br><span class="line"></span><br><span class="line">2019年4月25日15:26:30 更新</span><br><span class="line">https:&#x2F;&#x2F;t.odmail.cn&#x2F;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注册地址"><a href="#注册地址" class="headerlink" title="注册地址"></a>注册地址</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">学生版：https:&#x2F;&#x2F;signup.microsoft.com&#x2F;signup?sku&#x3D;student</span><br><span class="line"></span><br><span class="line">教师版：https:&#x2F;&#x2F;signup.microsoft.com&#x2F;signup?sku&#x3D;faculty</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;临时邮箱&quot;&gt;&lt;a href=&quot;#临时邮箱&quot; class=&quot;headerlink&quot; title=&quot;临时邮箱&quot;&gt;&lt;/a&gt;临时邮箱&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr</summary>
      
    
    
    
    <category term="OneDrive" scheme="https://blog.wangk.cn/categories/OneDrive/"/>
    
    
    <category term="OneDrive" scheme="https://blog.wangk.cn/tags/OneDrive/"/>
    
  </entry>
  
  <entry>
    <title>nginx静态文件缓存的解决方案</title>
    <link href="https://blog.wangk.cn/2019/03/24/nginx%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://blog.wangk.cn/2019/03/24/nginx%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6%E7%BC%93%E5%AD%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2019-03-24T14:33:45.000Z</published>
    <updated>2021-03-15T02:34:38.238Z</updated>
    
    <content type="html"><![CDATA[<p>nginx的一大功能就是完成静态资源的分离部署，减轻后端服务器的压力，如果给这些静态资源再加一级nginx的缓存，可以进一步提升访问效率。</p><h1 id="添加nginx-conf的http级别的缓存配置"><a href="#添加nginx-conf的http级别的缓存配置" class="headerlink" title="添加nginx.conf的http级别的缓存配置"></a>添加nginx.conf的http级别的缓存配置</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">##cache##</span></span><br><span class="line">    <span class="attribute">proxy_connect_timeout</span> <span class="number">500</span>;</span><br><span class="line">    <span class="comment">#跟后端服务器连接的超时时间_发起握手等候响应超时时间</span></span><br><span class="line">    <span class="attribute">proxy_read_timeout</span> <span class="number">600</span>;</span><br><span class="line">    <span class="comment">#连接成功后_等候后端服务器响应的时间_其实已经进入后端的排队之中等候处理</span></span><br><span class="line">    <span class="attribute">proxy_send_timeout</span> <span class="number">500</span>;</span><br><span class="line">    <span class="comment">#后端服务器数据回传时间_就是在规定时间内后端服务器必须传完所有数据</span></span><br><span class="line">    <span class="attribute">proxy_buffer_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="comment">#代理请求缓存区_这个缓存区间会保存用户的头信息以供Nginx进行规则处理_一般只要能保存下头信息即可  </span></span><br><span class="line">    <span class="attribute">proxy_buffers</span> <span class="number">4</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="comment">#同上 告诉Nginx保存单个用的几个Buffer最大用多大空间</span></span><br><span class="line">    <span class="attribute">proxy_busy_buffers_size</span> <span class="number">256k</span>;</span><br><span class="line">    <span class="comment">#如果系统很忙的时候可以申请更大的proxy_buffers 官方推荐*2</span></span><br><span class="line">    <span class="attribute">proxy_temp_file_write_size</span> <span class="number">128k</span>;</span><br><span class="line">    <span class="comment">#proxy缓存临时文件的大小</span></span><br><span class="line">    <span class="attribute">proxy_temp_path</span> /data/wwwdata/nginx/temp;</span><br><span class="line">    <span class="comment">#用于指定本地目录来缓冲较大的代理请求</span></span><br><span class="line">    <span class="attribute">proxy_cache_path</span> /data/wwwdata/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=cache_one:<span class="number">200m</span> inactive=<span class="number">1d</span> max_size=<span class="number">30g</span>;</span><br><span class="line">    <span class="comment">#设置web缓存区名为cache_one,内存缓存空间大小为12000M，自动清除超过15天没有被访问过的缓存数据，硬盘缓存空间大小200g</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="在访问静态文件的location上添加缓存"><a href="#在访问静态文件的location上添加缓存" class="headerlink" title="在访问静态文件的location上添加缓存"></a>在访问静态文件的location上添加缓存</h1><h1 id="在proxy-pass跳转的location中配置静态文件的路径"><a href="#在proxy-pass跳转的location中配置静态文件的路径" class="headerlink" title="在proxy_pass跳转的location中配置静态文件的路径"></a>在proxy_pass跳转的location中配置静态文件的路径</h1><h1 id="清除缓存"><a href="#清除缓存" class="headerlink" title="清除缓存"></a>清除缓存</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;nginx的一大功能就是完成静态资源的分离部署，减轻后端服务器的压力，如果给这些静态资源再加一级nginx的缓存，可以进一步提升访问效率。&lt;/p&gt;
&lt;h1 id=&quot;添加nginx-conf的http级别的缓存配置&quot;&gt;&lt;a href=&quot;#添加nginx-conf的http级别</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Docker CE</title>
    <link href="https://blog.wangk.cn/2019/01/04/DockerCe/"/>
    <id>https://blog.wangk.cn/2019/01/04/DockerCe/</id>
    <published>2019-01-04T06:20:25.000Z</published>
    <updated>2021-03-15T02:34:38.225Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="使用官方安装脚本自动安装"><a href="#使用官方安装脚本自动安装" class="headerlink" title="使用官方安装脚本自动安装"></a>使用官方安装脚本自动安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h2 id="Ubuntu-14-04-16-04-使用apt-get进行安装"><a href="#Ubuntu-14-04-16-04-使用apt-get进行安装" class="headerlink" title="Ubuntu 14.04 16.04 (使用apt-get进行安装)"></a>Ubuntu 14.04 16.04 (使用apt-get进行安装)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="comment"># step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="comment"># Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository <span class="string">&quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu <span class="subst">$(lsb_release -cs)</span> stable&quot;</span></span><br><span class="line"><span class="comment"># Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># apt-cache madison docker-ce</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment">#   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="comment"># Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="comment"># sudo apt-get -y install docker-ce=[VERSION]</span></span><br></pre></td></tr></table></figure><h2 id="CentOS-7-使用yum进行安装"><a href="#CentOS-7-使用yum进行安装" class="headerlink" title="CentOS 7 (使用yum进行安装)"></a>CentOS 7 (使用yum进行安装)</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># Step 3: 更新并安装 Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="comment"># Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：</span></span><br><span class="line"><span class="comment"># 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="comment"># vim /etc/yum.repos.d/docker-ce.repo</span></span><br><span class="line"><span class="comment">#   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="comment"># Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="comment"># yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="comment">#   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="comment">#   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="comment">#   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="comment">#   Available Packages</span></span><br><span class="line"><span class="comment"># Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="comment"># sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://github.com/docker/compose/releases</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><h2 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://2tttp2d6.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="comment"># CentOS</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;https://2tttp2d6.mirror.aliyuncs.com&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h2 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># root @ ubuntu-bionic in ~ [14:47:25]</span></span><br><span class="line">$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:           18.09.0</span><br><span class="line"> API version:       1.39</span><br><span class="line"> Go version:        go1.10.4</span><br><span class="line"> Git commit:        4d60db4</span><br><span class="line"> Built:             Wed Nov  7 00:49:01 2018</span><br><span class="line"> OS/Arch:           linux/amd64</span><br><span class="line"> Experimental:      <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line"> Engine:</span><br><span class="line">  Version:          18.09.0</span><br><span class="line">  API version:      1.39 (minimum version 1.12)</span><br><span class="line">  Go version:       go1.10.4</span><br><span class="line">  Git commit:       4d60db4</span><br><span class="line">  Built:            Wed Nov  7 00:16:44 2018</span><br><span class="line">  OS/Arch:          linux/amd64</span><br><span class="line">  Experimental:     <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># root @ ubuntu-bionic in ~ [14:47:30]</span></span><br><span class="line">$ docker-compose version</span><br><span class="line">docker-compose version 1.23.2, build 1110ad01</span><br><span class="line">docker-py version: 3.6.0</span><br><span class="line">CPython version: 3.6.7</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0f  25 May 2017</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;使用官方安装脚本自动安装&quot;&gt;&lt;a href=&quot;#使用官方安装脚本自动安装&quot; class=&quot;headerlink&quot; title=&quot;使</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Eloquent 模型关联关系</title>
    <link href="https://blog.wangk.cn/2018/12/18/Eloquent%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/"/>
    <id>https://blog.wangk.cn/2018/12/18/Eloquent%E6%A8%A1%E5%9E%8B%E5%85%B3%E8%81%94%E5%85%B3%E7%B3%BB/</id>
    <published>2018-12-18T15:16:26.000Z</published>
    <updated>2021-03-24T15:55:30.842Z</updated>
    
    <content type="html"><![CDATA[<p>我们所熟知的 MySQL、SQL Server、Oracle 都是关系型数据库，何谓关系型数据库？简单来说就是数据表之间存在关联关系。到目前为止，我们介绍的所有 Eloquent 模型操作都是针对单表的，接下来我们将花三篇左右的篇幅来给大家介绍如何在 Eloquent 模型类中建立模型之间的各种关联关系，以及如何实现关联查询和更新。</p><p>Eloquent 模型支持的关联关系包括以下七种：</p><ul><li>  一对一</li><li>  一对多</li><li>  多对多</li><li>  远层一对多</li><li>  多态关联（一对一）</li><li>  多态关联（一对多）</li><li>  多态关联（多对多）</li></ul><h1 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h1><h2 id="建立关联关系"><a href="#建立关联关系" class="headerlink" title="建立关联关系"></a>建立关联关系</h2><p>一对一是最简单的关联关系，一般可用于某张数据表的扩展表与主表之间的关联关系。比如在大型系统中，我们的用户表通常用于最基本信息的存储，如邮箱、用户名、密码等，然后像用户爱好、标签、个性签名、所在地等信息都存到另一张扩展表中，需要的时候才会去扩展表取数据，从而提高查询性能。针对这样的场景，我们就可以在两张表对应模型之间建立一对一关联。</p><p>在开始之前，我们先通过数据库迁移创建一张 user_profiles 数据表，并创建对应模型 UserProfile，这可以通过以下 Artisan 命令一次完成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model UserProfile -m</span><br></pre></td></tr></table></figure><p>在生成的 create_user_profiles 迁移文件中编写迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;user_profiles&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;user_id&#x27;</span>)-&gt;unsigned()-&gt;default(<span class="number">0</span>)-&gt;unique();</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;bio&#x27;</span>)-&gt;nullable()-&gt;comment(<span class="string">&#x27;个性签名&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;city&#x27;</span>)-&gt;nullable()-&gt;comment(<span class="string">&#x27;所在城市&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;json(<span class="string">&#x27;hobby&#x27;</span>)-&gt;nullable()-&gt;comment(<span class="string">&#x27;个人爱好&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，我们在 user_profiles 表中添加了一个 user_id 字段用于指向所属用户，从而建立于 users 表的关联。运行 php artisan migrate 在数据库创建这张数据表。</p><p>准备好数据表之后，接下来，我们来通过模型类建立 users 表和 user_profiles 表之间的关联，Eloquent 模型类底层提供了相应的 API 方法帮助我们建立模型之间的关联。首先，我们在 User 模型类中通过 hasOne 方法定义其与 UserProfile 的一对一关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">profile</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasOne(UserProfile::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过数据库填充技术在 user_profiles 插入一些数据，这样就可以在 User 模型实例上通过关联方法名作为动态属性访问与其对应的 UserProfile 模型实例了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = User::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$profile</span> = <span class="variable">$user</span>-&gt;profile;</span><br></pre></td></tr></table></figure><p>打印 $profile 结果如下：</p><p><img src="https://upload.anitoys.com/hellocode/20210324234925.jpg" alt="img"></p><h2 id="Eloquent-底层约定"><a href="#Eloquent-底层约定" class="headerlink" title="Eloquent 底层约定"></a>Eloquent 底层约定</h2><p>需要指出的是，在关联关系的建立过程中，Eloquent 也遵循了「约定大于配置」的原则。你可能注意到了我们在定义关联关系时，仅仅指定了模型类名，并没有指定通过哪些数据表字段建立关联，这并不是说 Laravel 神通广大，能知过去未来之事，而是因为 Eloquent 对此做了默认的约定。hasOne 方法的完整签名是：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasOne</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$foreignKey</span> = <span class="literal">null</span>, <span class="variable">$localKey</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>其中，第一个参数是关联模型的类名，第二个参数是关联模型类所属表的外键，这里对应的是 user_profiles 表的 user_id 字段，第三个参数是关联表的外键关联到当前模型所属表的哪个字段，这里对应的是 users 表的 id 字段。为什么我们不需要指定 Laravel 就能完成这种关联呢，这是因为如果没有指定 $foreignKey，Eloquent 底层会通过如下方法去拼接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getForeignKey</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Str::snake(class_basename(<span class="keyword">$this</span>)).<span class="string">&#x27;_&#x27;</span>.<span class="keyword">$this</span>-&gt;getKeyName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以看到，在本例中，拼接的结果正好是 user_id。</p><p>同样，没有指定 $localKey 的话，Eloquent 底层会返回主键 ID：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getKeyName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;primaryKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本例中，就是 id 了。</p><p>遵循这种默认的约定，可以帮我们少写很多代码，减少很多额外的配置，所以如果不是迫不得已（比如从其他系统迁移过来），建议你在使用 Eloquent 的话，尽量遵循这些默认约定。如果数据表没有遵循这种约定的话，只能手动传参了。</p><h2 id="建立相对的关联关系"><a href="#建立相对的关联关系" class="headerlink" title="建立相对的关联关系"></a>建立相对的关联关系</h2><p>通常我们都是通过 User 模型获取 UserProfile 模型，但是有时候我们可能需要反过来通过 UserProfile 反查所属的 User 模型，Eloquent 底层也为我们提供了相应的 belongsTo 方法来建立相对的一对一关联关系，我们在 UserProfile 模型类定义其与 User 模型的关联如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，采用关联关系方法名作为动态属性即可访问该模型所属 User 模型实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$profile</span> = UserProfile::findOrFail(<span class="number">2</span>);</span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$profile</span>-&gt;user;</span><br></pre></td></tr></table></figure><p>打印 $user 用户信息如下：</p><p><img src="https://upload.anitoys.com/hellocode/20210324234940.jpg" alt="img"><br>同样，和 hasOne 方法一样，belongsTo 方法也是遵循了默认的约定规则，其完整方法签名如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">belongsTo</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$foreignKey</span> = <span class="literal">null</span>, <span class="variable">$ownerKey</span> = <span class="literal">null</span>, <span class="variable">$relation</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>其中第一个参数是关联模型的类名。</p><p>第二个参数是当前模型类所属表的外键，在本例中是 user_profiles 表的 user_id 字段，拼接规则和 hasOne 那里类似，只不过这里是基于第四个参数关联关系名称 $relation：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (is_null(<span class="variable">$relation</span>)) &#123;</span><br><span class="line">    <span class="variable">$relation</span> = <span class="keyword">$this</span>-&gt;guessBelongsToRelation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (is_null(<span class="variable">$foreignKey</span>)) &#123;</span><br><span class="line">    <span class="variable">$foreignKey</span> = Str::snake(<span class="variable">$relation</span>).<span class="string">&#x27;_&#x27;</span>.<span class="variable">$instance</span>-&gt;getKeyName();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>$relation 默认约定是对应关联关系方法名，这里的是 user。如果你这里定义的方法名不是 user，则需要手动指定外键参数。</p><p>第三个参数是关联模型类所属表的主键：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$instance</span> = <span class="keyword">$this</span>-&gt;newRelatedInstance(<span class="variable">$related</span>);</span><br><span class="line">...</span><br><span class="line"><span class="variable">$ownerKey</span> = <span class="variable">$ownerKey</span> ?: <span class="variable">$instance</span>-&gt;getKeyName();</span><br></pre></td></tr></table></figure><p>第四个参数前面已经说过，默认约定就是关联关系方法名，也是关联关系动态属性名。</p><p>还是很之前一样，建议遵循这些默认约定，可以少写很多代码，避免配置出错导致程序bug。如果实在满足不了这些默认的约定，只能指定按照上述约定指定传入自己的参数了。</p><p>一对一关联很简单，但是我们还是花了很长的篇幅来讨论，因为后面其它关联的实现思路、访问方式、底层约定都是类似的，掌握了一对一关联，就能更好的理解和掌握其它关联关系的创建和使用。</p><h1 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h1><h2 id="建立关联关系-1"><a href="#建立关联关系-1" class="headerlink" title="建立关联关系"></a>建立关联关系</h2><p>一对多关联是我们日常开发中经常碰到的一种关联关系。以博客系统为例，一个用户可以发布多篇文章，反过来，一篇只能归属于一个用户，那么用户和文章之间就是一对多的关系，同样，用户可以发布多条评论，一条评论只能归属于一个用户，用户与评论之间也是一对多关系。</p><p>要定义用户文章之间的一对多关联，可以在 User 模型类中通过 Eloquent 底层提供的 hasMany 方法来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasMany(Post::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们之间已经创建过 users 表和 posts 表，并且初始化过数据，所以我们可以直接通过动态属性的方式来调用用户模型上的文章：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = User::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$posts</span> = <span class="variable">$user</span>-&gt;posts;</span><br></pre></td></tr></table></figure><p>与 hasOne 返回的是单个模型实例不一样，hasMany 返回的是模型类集合：</p><p><img src="https://upload.anitoys.com/hellocode/20210324234958.jpg" alt="img"></p><h2 id="Eloquent-底层约定-1"><a href="#Eloquent-底层约定-1" class="headerlink" title="Eloquent 底层约定"></a>Eloquent 底层约定</h2><p>和 hasOne 方法一样，hasMany 方法底层也对如何建立关联关系做了约定，而且 hasMany 方法和 hasOne 方法的签名一样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasMany</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$foreignKey</span> = <span class="literal">null</span>, <span class="variable">$localKey</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>$foreignKey 和 $localKey 默认获取逻辑也和 hasOne 完全一样，这里不再赘述。其实你完全可以把一对一关联看作一对多关联的简化版本，只不过一对一退化为只返回一条记录，所以实现逻辑一样也不难理解了。</p><p>如果你的数据表结构不符合这种默认约定，可以自定义传入对应字段参数值。</p><h2 id="建立相对的关联关系-1"><a href="#建立相对的关联关系-1" class="headerlink" title="建立相对的关联关系"></a>建立相对的关联关系</h2><p>与一对一一样，我们可以在文章模型中建立于用户模型之间的相对关联关系，而且这种使用场景很普遍，比如在文章详细页或列表页显示文章作者信息。还是通过 Eloquent 提供的 belongsTo 方法来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">user</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以在文章模型实例上通过动态属性 user 来访问对应的用户信息：</p><p>$post = Post::findOrFail(29);<br>$author = $post-&gt;user;<br>belongsTo 方法的底层约定我们在前面一对一关联中已经讨论过。这里，如果你想要让代码可读性更好，可以将 Post 模型中的关联关系调方法名修改为 author，这样，我们就需要手动指定更多的 belongsTo 方法传入参数了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class, <span class="string">&#x27;user_id&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;author&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的访问方式也需要做调整：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$author</span> = <span class="variable">$post</span>-&gt;author;</span><br></pre></td></tr></table></figure><p>返回结果完全一样。</p><h2 id="渴求式加载"><a href="#渴求式加载" class="headerlink" title="渴求式加载"></a>渴求式加载</h2><p>前面我们演示的关联关系查询都是通过动态属性的方式，这种加载方式叫做「懒惰式加载」，因为都是用到的时候才回去查询，这就意味着要多次对数据库的进行查询才能返回需要的结果。如果是单条记录获取关联关系，就需要两次查询；如果是多条记录获取关联关系，比如文章列表页获取作者信息，因为每篇文章的作者通过动态属性获取都有一次查询，所以对N条记录来说，需要「N+1」次查询才能返回需要的结果，从数据库查询优化的角度来说，显然是不合理的。能不能一次就返回所有的关联查询结果呢？</p><p>可以，Eloquent 为我们提供了 with 方法，我们将需要查询的关联关系动态属性（关联方法名）传入该方法，并将其链接到 Eloquent 模型原有的查询中，就可以一次完成关联查询，加上模型自身查询，总共查询两次。我们将这种加载方式叫做「渴求式加载」，即根据所需预先查询所有数据。</p><p>以文章列表为例，我们可以通过这种方式获取文章及对应作者信息：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = Post::with(<span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">    -&gt;where(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">    -&gt;offset(<span class="number">1</span>)-&gt;limit(<span class="number">10</span>)</span><br><span class="line">    -&gt;get();</span><br></pre></td></tr></table></figure><p>对应的底层 SQL 执行语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `posts` <span class="keyword">where</span> `views` <span class="operator">&gt;</span> <span class="number">0</span> <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span> limit <span class="number">10</span> <span class="keyword">offset</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `users` <span class="keyword">where</span> `users`.`id` <span class="keyword">in</span> (?, ?, ?, ?, ?, ?) <span class="keyword">and</span> `email_verified_at` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>这样，就可以在返回的列表中看到关联的作者信息了，在遍历的时候可以通过 $post-&gt;author 获取，而无需每次加载，从而提高数据库查询性能：</p><p><img src="https://upload.anitoys.com/hellocode/20210324235009.jpg" alt="img"></p><h1 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h1><h2 id="建立关联关系-2"><a href="#建立关联关系-2" class="headerlink" title="建立关联关系"></a>建立关联关系</h2><p>多对多关联也很常见，还是以博客系统为例，我们会为每篇文章设置标签，一篇文章往往有多个标签，反过来，一个标签可能会归属于多篇文章，这时，我们说文章和标签之间是多对多的关联关系。</p><p>多对多关联比一对一和一对多关联复杂一些，需要借助一张中间表才能建立关联关系。以文章标签为例，文章表已经存在了，还需要创建一张 tags 表和中间表 post_tags。首先创建 Tags 模型类及其对应数据表 tags 迁移文件：</p><p>php artisan make:model Tag -m<br>编写 create_tags_table 迁移文件对应类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;tags&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;name&#x27;</span>, <span class="number">100</span>)-&gt;unique()-&gt;comment(<span class="string">&#x27;标签名&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建 post_tags 数据表迁移文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:migration create_post_tags_table --create=post_tags</span><br></pre></td></tr></table></figure><p>编写其对应迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;post_tags&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;post_id&#x27;</span>)-&gt;unsigned()-&gt;default(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;tag_id&#x27;</span>)-&gt;unsigned()-&gt;default(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;unique([<span class="string">&#x27;post_id&#x27;</span>, <span class="string">&#x27;tag_id&#x27;</span>]);</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 php artisan migrate 让迁移生效。</p><p>接下来，我们在 Post 模型类中定义其与 Tags 模型类的关联关系，通过 Eloquent 提供的 belongsToMany 方法来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过数据库填充器填充一些数据到 tags 表和 post_tags 表，这样我们就可以通过关联查询查询指定 Post 模型上的标签信息了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$tags</span> = <span class="variable">$post</span>-&gt;tags;</span><br></pre></td></tr></table></figure><p>返回的是个模型集合：</p><p><img src="https://upload.anitoys.com/hellocode/20210324235018.jpg" alt="img"><br>当然，你也可以通过前面提到的渴求式加载方式获取标签数据：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with(<span class="string">&#x27;tags&#x27;</span>)-&gt;find(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$tags</span> = <span class="variable">$post</span>-&gt;tags;</span><br></pre></td></tr></table></figure><p>返回结果和上面一样，但减少了对数据库的查询次数。</p><h2 id="Eloquent-底层约定-2"><a href="#Eloquent-底层约定-2" class="headerlink" title="Eloquent 底层约定"></a>Eloquent 底层约定</h2><p>可以看到我们在定义多对多关联的时候，也没有指定通过哪些字段进行关联，这同样是遵循 Eloquent 底层默认约定的功劳，belongsToMany 方法签名如下：</p><p>public function belongsToMany($related, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null, $relation = null)<br>除了第一个参数之外，其它参数都可以为空。第一个参数是关联模型的类名，这里是 Tag。</p><p>第二个参数 $table 是建立多对多关联的中间表名，该表名默认拼接规则如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$segments</span> = [</span><br><span class="line">    <span class="variable">$instance</span> ? <span class="variable">$instance</span>-&gt;joiningTableSegment()</span><br><span class="line">                  : Str::snake(class_basename(<span class="variable">$related</span>)),</span><br><span class="line">    <span class="keyword">$this</span>-&gt;joiningTableSegment(),</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">sort(<span class="variable">$segments</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> strtolower(implode(<span class="string">&#x27;_&#x27;</span>, <span class="variable">$segments</span>));</span><br></pre></td></tr></table></figure><p>其中 $this-&gt;joiningTableSegment() 将当前模型类名转化为小写字母+下划线格式（注意不是复数格式，所以并不是对应默认表名），$instance 对应关联模型类实例，如果为空的话返回Str::snake(class_basename($related))，也会将关联类名转化为小写字母+下划线格式（也不是表名），然后对转化后的字符片段按字母表排序。所以本例中如果不指定中间表名，按照默认约定该值是 post_tag。但是为了遵循 Laravel 数据表名都是复数，所以我这里自定义了一回。</p><p>第三个参数是 $foreignPivotKey 指的是中间表中当前模型类的外键，默认拼接规则和前面一对一、一对多一样，所以在本例中是 posts 表的 post_id 字段。我在建表的时候遵循了这个约定，所以不需要额外指定。</p><p>第四个参数 $relatedPivotKey 是中间表中当前关联模型类的外键，拼接规则和 $foreignPivotKey 一样，只不过作用于关联模型类，所以在本例中是 tags 表的 tag_id 字段。同样，我在建表的时候也遵循了这一约定，不需要额外指定。</p><p>第五个参数 $parentKey 表示对应当前模型的哪个字段（即 $foreignPivotKey 映射到当前模型所属表的哪个字段），默认是主键 ID，即 posts 表的 id 字段，所以这里不需要额外指定。</p><p>第六个参数 $relatedKey 表示对应关联模型的哪个字段（即 $relatedPivotKey 映射到关联模型所属表的哪个字段），默认是关联模型的主键 ID，即 tags 表的 id 字段，所以这里也不需要额外指定。</p><p>最后一个参数 $relation 表示关联关系名称，用于设置查询结果中的关联属性，默认是关联方法名。</p><p>如果你没有遵循上述约定，需要手动指定自己的参数字段，不过还是建议遵循这些默认的约定，不然写着写着容易把自己绕晕。</p><h2 id="建立相对的关联关系-2"><a href="#建立相对的关联关系-2" class="headerlink" title="建立相对的关联关系"></a>建立相对的关联关系</h2><p>与之前的关联关系一样，多对多关联也支持建立相对的关联关系，而且由于多对多的双方是平等的，不存在谁归属谁的问题，所以建立相对关联的方法都是一样的，我们可以在 Tag 模型中通过 belongsToMany 方法建立其与 Post 模型的关联关系：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Post::class, <span class="string">&#x27;post_tags&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如博客的标签页，通过指定标签查看归属该标签下的所有文章，就可以用到类似的关联查询，相应的实现代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tag</span> = Tag::with(<span class="string">&#x27;posts&#x27;</span>)-&gt;where(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;ab&#x27;</span>)-&gt;first();</span><br><span class="line"><span class="variable">$posts</span> = <span class="variable">$tag</span>-&gt;posts;</span><br></pre></td></tr></table></figure><p>对应的查询结果如下：<br><img src="https://upload.anitoys.com/hellocode/20210324235027.jpg" alt="img"></p><h2 id="获取中间表字段"><a href="#获取中间表字段" class="headerlink" title="获取中间表字段"></a>获取中间表字段</h2><p>Eloquent 还提供了方法允许你获取中间表的字段，你仔细看查询结果字段，会发现 relations 字段中有一个 pivot 属性，中间表字段就存放在这个属性对象上：<br><img src="https://upload.anitoys.com/hellocode/20210324235039.jpg" alt="img"><br>我们在遍历返回结果的时候可以在循环中通过 $post-&gt;pivot-&gt;tag_id 获取中间表字段值。不过中间表默认只返回关联模型的主键字段，如果要返回额外字段，需要在定义关联关系的时候手动指定，比如如果想要返回时间戳信息，可以这么定义：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>)-&gt;withTimestamps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就可以返回文章标签创建时间和更新时间了：<br><img src="https://upload.anitoys.com/hellocode/20210324235050.jpg" alt="img"><br>如果除此之外，你还在中间表中定义了额外的字段信息，比如 user_id，可以通过 with 方法传入字段然后将其返回：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>)-&gt;withPivot(<span class="string">&#x27;user_id&#x27;</span>)-&gt;withTimestamps();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义中间表模型类"><a href="#自定义中间表模型类" class="headerlink" title="自定义中间表模型类"></a>自定义中间表模型类</h2><p>你还可以通过自定义中间表对应模型类实现更多自定义操作，中间表模型类继承自 Illuminate\Database\Eloquent\Relations\Pivot，Pivot 也是 Eloquent Model 类的子类，只不过为中间表操作定义了很多方法和属性，比如我们创建一个自定义的中间表模型类 PostTag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Relations</span>\<span class="title">Pivot</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PostTag</span> <span class="keyword">extends</span> <span class="title">Pivot</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span> = <span class="string">&#x27;post_tags&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们在定义多对多关联关系的时候指定自定义的模型类了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>)-&gt;using(PostTag::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更多中间表操作"><a href="#更多中间表操作" class="headerlink" title="更多中间表操作"></a>更多中间表操作</h2><p>此外，如果你觉得 pivot 可读性不好，你还可以自定义中间表实例属性名称：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>)-&gt;as(<span class="string">&#x27;taggable&#x27;</span>)-&gt;withTimestamps();</span><br></pre></td></tr></table></figure><p>这样，就可以通过 $tag-&gt;taggable-&gt;created_at 访问中间表字段值了。</p><p>还可以通过中间表字段值过滤关联数据（支持 where 和 in 查询）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>)-&gt;wherePivot(<span class="string">&#x27;user_id&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsToMany(Tag::class, <span class="string">&#x27;post_tags&#x27;</span>)-&gt;wherePivotIn(<span class="string">&#x27;user_id&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><h1 id="远层一对多关联"><a href="#远层一对多关联" class="headerlink" title="远层一对多关联"></a>远层一对多关联</h1><h2 id="什么是远层一对多关联"><a href="#什么是远层一对多关联" class="headerlink" title="什么是远层一对多关联"></a>什么是远层一对多关联</h2><p>我们在上一篇教程中学习了一对多关联，远层一对多在一对多关联的基础上加上了一个修饰词「远层」，意味着这个一对多关系不是直接关联，而是「远层」关联，远层怎么关联呢？借助中间表。前面我们讨论的多对多关联也是借助中间表，但是远层一对多与其区别在于还是一对多的关联。所以理解一对多和多对多关联是理解今天介绍的几种关联关系的基础。</p><p>光说概念你可能还是懵，下面我们举个例子来说明。如果我们的博客系统是针对全球市场的话，可能针对不同的国家推出不同的用户系统和功能，然后中国用户过来就只展示中国用户发布的文章，日本用户过来就只展示日本用户发布的文章，这里面涉及到三张表，存储国家的 countries 表，存储用户的 users 表，以及存储文章的 posts 表。用户与文章是一对多的关联关系，这一点我们上篇教程已经说过，国家与用户之间是一对多的关联（一个用户只能有一个国籍），那么通过用户这张中间表，国家和文章之间也建立起来一对多的关联，只是这个关联不是直接的关联，而是「远层」的关联。针对这样的情况，我们说国家和文章之间是远层的一对多关联。</p><h2 id="建立远层一对多关联关系"><a href="#建立远层一对多关联关系" class="headerlink" title="建立远层一对多关联关系"></a>建立远层一对多关联关系</h2><p>了解这个关联的概念之后，我们要查询某个国家下的文章，要怎么做呢？或者说我们要怎么在模型类之间建立远层的一对多关联呢？</p><p>开始之前，我们要先创建 Country 模型类及其对应数据库迁移：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Country -m </span><br></pre></td></tr></table></figure><p>编写新生成的数据库迁移文件对应迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;countries&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;name&#x27;</span>, <span class="number">100</span>)-&gt;unique();</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;slug&#x27;</span>, <span class="number">100</span>)-&gt;unique();</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，编写迁移文件为 users 表新增一个 country_id 字段：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:migration alter_users_add_country_id --table=users</span><br></pre></td></tr></table></figure><p>编写新生成的迁移类文件如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Schema</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Schema</span>\<span class="title">Blueprint</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Migrations</span>\<span class="title">Migration</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlterUsersAddCountryId</span> <span class="keyword">extends</span> <span class="title">Migration</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Run the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::table(<span class="string">&#x27;users&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;country_id&#x27;</span>)-&gt;unsigned()-&gt;default(<span class="number">0</span>);</span><br><span class="line">            <span class="variable">$table</span>-&gt;index(<span class="string">&#x27;country_id&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Reverse the migrations.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">down</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Schema::table(<span class="string">&#x27;users&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$table</span>-&gt;dropColumn(<span class="string">&#x27;country_id&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，运行 php artisan migrate 让迁移生效。在 countries 表和 users 表填充一些测试数据便于后续测试。</p><p>准备好数据库、模型类并填充测试数据后，接下来，我们在 Country 模型类中通过 Eloquent 提供的 hasManyThrough 方法定义其与 Post 模型类之间的远层一对多关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;hasManyThrough(Post::class, User::class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，第一个参数是关联的模型类，第二个参数是中间借助的模型类。</p><p>这样，我们就可以在代码中通过 Country 模型实例获取归属于该国家的所有文章了，查询方式和前面其它关联查询一样，可以懒惰式加载，也可以渴求式加载：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$country</span> = Country::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$posts</span> = <span class="variable">$country</span>-&gt;posts;</span><br></pre></td></tr></table></figure><p>返回结果也是模型集合：<br><img src="https://upload.anitoys.com/hellocode/20210324235103.jpg" alt="img"></p><h2 id="Eloquent-底层约定-3"><a href="#Eloquent-底层约定-3" class="headerlink" title="Eloquent 底层约定"></a>Eloquent 底层约定</h2><p>同样，我们在通过 hasManyThrough 方法定义远层一对多关联关系的时候，并没有指定关联字段，因为我们在定义数据库字段、模型类的时候都遵循了 Eloquent 底层的约定。</p><p>我们来看一下 hasManyThrough 方法的完整签名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hasManyThrough</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$through</span>, <span class="variable">$firstKey</span> = <span class="literal">null</span>, <span class="variable">$secondKey</span> = <span class="literal">null</span>, <span class="variable">$localKey</span> = <span class="literal">null</span>, <span class="variable">$secondLocalKey</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>其中，第一个参数和第二个参数分别是关联模型类和中间模型类。</p><p>第三个参数 $firstKey 表示中间模型类与当前模型类的关联外键，按照默认约定，在本例中拼接出来的字段是 country_id，正好和我们在中间表 users 中新增的 country_id 吻合，所以不需要额外指定。</p><p>第四个参数 $secondKey 指的是中间模型类与关联模型类的关联外键，按照默认约定，在本例中拼接出来的字段是 user_id，正好和我们在关联表 posts 中定义的 user_id 吻合，所以也不需要额外指定。</p><p>第五个参数 $localKey 默认是当前模型类的主键 ID，第六个参数是中间模型类的主键 ID。</p><p>如果你的字段定义与 Eloquent 底层默认约定拼接出来的字段不一致，需要手动指定对应参数。</p><h1 id="一对一的多态关联"><a href="#一对一的多态关联" class="headerlink" title="一对一的多态关联"></a>一对一的多态关联</h1><h2 id="什么是一对一的多态关联"><a href="#什么是一对一的多态关联" class="headerlink" title="什么是一对一的多态关联"></a>什么是一对一的多态关联</h2><p>接下来讲的三个关联关系都归属于多态关联，多态关联允许目标模型通过单个关联归属于多种类型的模型，根据模型之间的关联关系类型，又可以将多态关联细分为一对一、一对多和多对多三种关联。首先我们来看最简单的一对一多态关联。</p><p>一对一多态关联和上一篇的一对一关联有点类似，只不过这里的一对一关联是「多态」的，说理论太抽象，我们还是举例来说明。假设在我们的博客系统中用户可以设置头像，文章也可以设置缩略图，我们知道每个用户只能有一个头像，一篇文章也只能有一个缩略图，所以此时用户和图片之间是一对一关联，文章和图片之间也是一对一关联，通过多态关联，我们可以让用户和文章共享与图片的一对一关联，我们只需要在图片模型类通过一次定义，就可以动态建立与用户和文章的关联。</p><p>要建立这种多态管理，需要图片表结构支持与对应用户和文章的关联，只是，在这里，我们需要两个字段才能建立这种关联，一个是类型字段，表示归属于用户还是文章，另一个是ID字段，指向对应的用户/文章ID，这样，我们就可以结合这两个字段唯一确定该图片归属于哪个用户/哪篇文章了。</p><h2 id="如何建立一对一的多态关联"><a href="#如何建立一对一的多态关联" class="headerlink" title="如何建立一对一的多态关联"></a>如何建立一对一的多态关联</h2><p>开始之前我们要创建图片模型类 Image 及其对应数据库迁移文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Image -m</span><br></pre></td></tr></table></figure><p>然后编写新创建的 create_images_table 迁移文件对应迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;images&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;url&#x27;</span>)-&gt;comment(<span class="string">&#x27;图片URL&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;morphs(<span class="string">&#x27;imageable&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中 $table-&gt;morphs(‘imageable’) 用于创建 imageable_id 和 imageable_type 两个字段，其中 imageable_type 用于存放 User 模型类或 Post 模型类，而 imageable_id 用于存放对应的模型实例 ID，从而方便遵循默认约定建立多态关联。</p><p>运行 php artisan migrate 让迁移生效，准备好数据表和模型类后，接下来我们在模型类中建立一对一的多态关联。首先在 Image 模型类中通过 morphTo 建立其与 User/Post 模型类之间的关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">imageable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphTo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们不需要指定任何字段，因为我们在创建数据表和定义关联方法的时候都遵循了 Eloquent 底层的约定，还是来看下 morphTo 方法的完整签名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">morphTo</span>(<span class="params"><span class="variable">$name</span> = <span class="literal">null</span>, <span class="variable">$type</span> = <span class="literal">null</span>, <span class="variable">$id</span> = <span class="literal">null</span>, <span class="variable">$ownerKey</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>第一个参数 $name 是关联关系名称，默认就是关联方法名，在本例中是 imageable。</p><p>第二个参数 $type、第三个参数 $id 结合第一个参数 $name 用于构建关联字段，在本例中就是 imageable_type 和 imageable_id。由于我们的数据库字段和关联方法名都遵循了默认约定，所以不需要额外指定。如果你的数据库字段名是自定义的，比如 item_id 和 item_type，那么就需要指定第一个参数值为 item。</p><p>最后一个参数是当前模型类的主键 ID。</p><p>这样，我们就可以在 images 表中填充一些测试数据进行测试了，你可以借助填充器来填充，或者手动插入，需要注意的是在 imageable_type 字段中需要插入完整的类名作为类型，比如 App\User 或者 App\Post，以便 Eloquent 在插询的时候结合 imageable_id 字段利用反射构造对应的模型实例：<br><img src="https://upload.anitoys.com/hellocode/20210324235351.jpg" alt="img"><br>这样，我们就可以在 Image 实例上获取其归属的模型实例了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$image</span> = Image::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$item</span> = <span class="variable">$image</span>-&gt;imageable;</span><br></pre></td></tr></table></figure><p>返回结果是对应的模型类实例，我们打印 $item 对象，现实如下：<br><img src="https://upload.anitoys.com/hellocode/20210324235115.jpg" alt="img"></p><h2 id="定义相对的关联关系"><a href="#定义相对的关联关系" class="headerlink" title="定义相对的关联关系"></a>定义相对的关联关系</h2><p>当然，我们在日常开发中，更常见的是获取某个用户的头像或者某篇文章的缩略图，这样，我们就需要在 User 模型中定义其与 Image 模型的关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">image</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphOne(Image::class, <span class="string">&#x27;imageable&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在 Post 模型中定义其与 Image 模型的关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">image</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphOne(Image::class, <span class="string">&#x27;imageable&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样，因为我们遵循了 Eloquent 底册的约定，只需要传入最少的参数即可建立关联。morphOne 方法的完整签名如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">morphOne</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$name</span>, <span class="variable">$type</span> = <span class="literal">null</span>, <span class="variable">$id</span> = <span class="literal">null</span>, <span class="variable">$localKey</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>第一个参数表示关联的模型类。</p><p>第二个参数 $name、第三个参数 $type、第四个参数 $id 和前面的 morphTo 方法的前三个参数一样，用于在关联表中拼接关联外键，在本例中就是 imageable_type 和 imageable_id，所以第三个和第四个参数不需要额外指定，当然如果你是用的是 item_id 和 item_type 字段需要将第二个参数设置为 item，如果结尾不是以 type 和 id 作为后缀，也需要通过 $type 和 $id 参数传入。</p><p>最后一个参数 $localKey 表示当前模型类的主键 ID。</p><p>在模型类中定义完关联方法后，就可以在代码中通过相应方法获取关联模型了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$image</span> = <span class="variable">$post</span>-&gt;image;</span><br></pre></td></tr></table></figure><p>返回结果是 Image 模型实例：<br><img src="https://upload.anitoys.com/hellocode/20210324235128.jpg" alt="img"><br>底层对应的查询 SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `images`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  `images`.`imageable_id` <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">and</span> `images`.`imageable_id` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">  <span class="keyword">and</span> `images`.`imageable_type` <span class="operator">=</span> &quot;App\Post&quot;</span><br><span class="line">limit</span><br><span class="line">  <span class="number">1</span></span><br></pre></td></tr></table></figure><h1 id="一对多的多态关联"><a href="#一对多的多态关联" class="headerlink" title="一对多的多态关联"></a>一对多的多态关联</h1><h2 id="什么是一对多的多态关联"><a href="#什么是一对多的多态关联" class="headerlink" title="什么是一对多的多态关联"></a>什么是一对多的多态关联</h2><p>理解了一对一的多态关联之后，一对多的多态关联理解起来就简单多了，其实就是模型类与关联类之间的关联变成一对多了，只不过这个一对多是多态的，如何理解这个多态，其实就是在关联表引入了类型的概念，关联表中的数据不再是与某一张表有关联，而是与多张表有关联，具体是哪张表通过关联类型来确定，具体与哪条记录关联，通过关联ID来确定。能理解到这个层面基本上就可以通吃多态关联了。这种逻辑和面向对象中的多态很像（面向对象三大特性：继承、封装、多态），所以将其称作「多态关联」。</p><p>下面我们还是以一个具体的例子来解释下一对多多态关联。</p><p>博客系统中免不了评论系统，以 Larave 学院为例，它支持两种类型的内容发布，一种是普通的文章，一种是独立的页面，分别存在两张表里。用户可以评论普通文章，也可以评论页面，我们不可能去为不同类型的内容分别创建评论表，因为它们的结构是完全一样的。我们知道如果单独看文章和评论，它们是一对多的关系，现在我们的评论表还要支持页面评论的存储，因此，需要引入一个类型字段做区分，这样，文章/页面与评论之间的关联关系就变成一对多的多态关联了。是不是这么看起来，也就那么回事了？</p><p>接下来，我们就来实际演示如何在模型类中建立一对多的多态关联。</p><h2 id="在模型类中构建一对多多态关联"><a href="#在模型类中构建一对多多态关联" class="headerlink" title="在模型类中构建一对多多态关联"></a>在模型类中构建一对多多态关联</h2><p>首先还是要创建对应数据表和模型，我们先创建评论模型类 Comment 及其数据库迁移文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Comment -m</span><br></pre></td></tr></table></figure><p>编写新生成的 create_comments_table 迁移文件对应迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;comments&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;text(<span class="string">&#x27;content&#x27;</span>)-&gt;comment(<span class="string">&#x27;评论内容&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;user_id&#x27;</span>)-&gt;unsigned()-&gt;default(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;morphs(<span class="string">&#x27;commentable&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;index(<span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;softDeletes();</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个 Page 模型类及其对应数据库迁移文件用于存放页面内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:model Page -m</span><br></pre></td></tr></table></figure><p>编写新生成的 create_pages_table 迁移文件对应迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">up</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Schema::create(<span class="string">&#x27;pages&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;title&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;string(<span class="string">&#x27;slug&#x27;</span>)-&gt;unique();</span><br><span class="line">        <span class="variable">$table</span>-&gt;text(<span class="string">&#x27;content&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;user_id&#x27;</span>)-&gt;unsigned()-&gt;default(<span class="number">0</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;index(<span class="string">&#x27;user_id&#x27;</span>);</span><br><span class="line">        <span class="variable">$table</span>-&gt;softDeletes();</span><br><span class="line">        <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行 php artisan migrate 让迁移生效。</p><p>准备好数据库之后，我们通过填充器填充一些数据到刚创建的两张数据表。然后在 Comment 模型类中通过 Eloquent 提供的 morphTo 方法定义其与 Post 模型和 Page 之间的一对多多态关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">commentable</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphTo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为一个评论只会对应一篇文章/页面，所以，通过和一对一的多态关联同样的 morphTo 方法定义其与文章和页面的关联关系即可。和前面的一对一多态关联一样，因为我们的数据表字段和关联方法名都遵循了 Eloquent 底层的默认约定，所以不需要指定任何额外参数，即可完成关联关系的构建。这些默认约定我们在上面一对一多态关联中已经详细列出，这里就不再赘述了。</p><p>这样，我们就可以通过 Comment 实例查询其归属的文章或页面了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$comment</span> = Comment::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$item</span> = <span class="variable">$comment</span>-&gt;commentable;</span><br></pre></td></tr></table></figure><p>返回的结果是对应的模型实例：<br><img src="https://upload.anitoys.com/hellocode/20210324235136.jpg" alt="img"></p><h2 id="定义相对的关联关系-1"><a href="#定义相对的关联关系-1" class="headerlink" title="定义相对的关联关系"></a>定义相对的关联关系</h2><p>同样，我们在日常开发中，更多的是通过文章或页面实例获取对应的评论信息，比如在文章页或页面页获取该文章或页面的所有评论。为此，我们需要在 Post 模型类和 Page 模型类中定义其与 Comment 模型的关联关系，这需要通过 morphMany 方法来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">comments</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphMany(Comment::class, <span class="string">&#x27;commentable&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和 morphOne 方法一样，因为我们遵循了 Eloquent 底层的默认约定，所以只需要传递很少的必要参数就可以定义关联关系了，morphMany 方法的完整签名如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">morphMany</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$name</span>, <span class="variable">$type</span> = <span class="literal">null</span>, <span class="variable">$id</span> = <span class="literal">null</span>, <span class="variable">$localKey</span> = <span class="literal">null</span></span>)</span></span><br></pre></td></tr></table></figure><p>这些参数的含义和 morphOne 方法完全一样，这里就不再赘述了。如果想要在 Post 模型下获取对应的所有评论，可以这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with(<span class="string">&#x27;comments&#x27;</span>)-&gt;findOrFail(<span class="number">23</span>);</span><br><span class="line"><span class="variable">$comments</span> = <span class="variable">$post</span>-&gt;comments;</span><br></pre></td></tr></table></figure><p>返回的结果是 Comment 模型对象集合：<br><img src="https://upload.anitoys.com/hellocode/20210324235145.jpg" alt="img"><br>对应的关联查询底层 SQL 语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `comments`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  `comments`.`commentable_id` <span class="keyword">in</span> (<span class="number">23</span>)</span><br><span class="line">  <span class="keyword">and</span> `comments`.`commentable_type` <span class="operator">=</span> &quot;App\Post&quot;</span><br><span class="line">  <span class="keyword">and</span> `comments`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h1 id="多对多的多态关联"><a href="#多对多的多态关联" class="headerlink" title="多对多的多态关联"></a>多对多的多态关联</h1><h2 id="什么是多对多的多态关联"><a href="#什么是多对多的多态关联" class="headerlink" title="什么是多对多的多态关联"></a>什么是多对多的多态关联</h2><p>多对多的多态关联比前面的一对一和一对多更加复杂，但是有了前面讲解的基础，理解起来也很简单。你可以类比下常规的多对多关联，现在加入了「多态」的概念，常规的多对多需要借助中间表，多态的也是，只不过此时不仅仅是两张表之间的关联，而是也要引入类型字段。</p><p>还是以文章和标签的关联为例，在常规的多对多关联中，中间表只需要一个标签 ID 和文章 ID 即可建立它们之间的关联，但当我们添加新的内容类型，比如页面、视频、音频，它们也有标签，而且完全可以共享一张标签表，此时仅仅一个文章 ID 已经满足不了定义内容与标签之间的关联了，所以此时引入多对多的多态关联，和前面两种多态关联思路一样，只是在多对多关联中，我们需要在中间表中引入类型字段来标识内容类型，将原来的文章ID调整为内容ID，这样就可以从数据库层面满足不同内容类型与标签之间的关联了。</p><p>所以你可以看到从一对一、一对多（远层一对多）、多对多、一对一多态关联、一对多多态关联、多对多多态关联，它们之间是层层递进的，理解了前面的，后面的也就更好理解。</p><p>下面我们以标签与文章、页面关联关系为例，演示如何定义和使用多对多的多态关联。</p><h2 id="在模型类中定义多对多的多态关联"><a href="#在模型类中定义多对多的多态关联" class="headerlink" title="在模型类中定义多对多的多态关联"></a>在模型类中定义多对多的多态关联</h2><p>首先我们要废弃原来的 post_tags 数据表，创建一个新的 taggables 数据表来构建不同内容类型与标签之间的关联：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php artisan make:migration create_taggables_table --create=taggables</span><br></pre></td></tr></table></figure><p>编写新生成的 create_taggables_table 迁移文件对应迁移类的 up 方法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Schema::create(<span class="string">&#x27;taggables&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Blueprint <span class="variable">$table</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$table</span>-&gt;increments(<span class="string">&#x27;id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;integer(<span class="string">&#x27;tag_id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;morphs(<span class="string">&#x27;taggable&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;index(<span class="string">&#x27;tag_id&#x27;</span>);</span><br><span class="line">    <span class="variable">$table</span>-&gt;unique([<span class="string">&#x27;tag_id&#x27;</span>, <span class="string">&#x27;taggable_id&#x27;</span>, <span class="string">&#x27;taggable_type&#x27;</span>]);</span><br><span class="line">    <span class="variable">$table</span>-&gt;timestamps();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>运行 php artisan migrate 让迁移生效。然后通过填充器填充一些测试数据到新生成的 taggables 数据表。</p><p>接下来我们在 Tag 模型类中通过 Eloquent 提供的 morphedByMany 方法定义其与其他模型类的多对多多态关联：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">posts</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphedByMany(Post::class, <span class="string">&#x27;taggable&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">pages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphedByMany(Page::class, <span class="string">&#x27;taggable&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和之前一样，因为我们遵循了 Eloquent 底层的默认约定，所以我们只需传递必需参数，无需额外配置即可定义关联关系，我们来看下 morphedByMany 方法的完整签名：</p><p>public function morphedByMany($related, $name, $table = null, $foreignPivotKey = null, $relatedPivotKey = null, $parentKey = null, $relatedKey = null)<br>其中第一个参数 $related 表示关联的模型类。</p><p>第二个参数 $name 表示关联的名称，和定义中间表数据库迁移的时候 morphs 方法中指定的值一致，也就是 taggable。</p><p>第三个参数 $table 表示中间表名称，默认是第二个参数 $name 的复数格式，这里就是 taggables 了，因为我们在创建数据表的时候遵循了这一约定，所以不需要额外指定。</p><p>第四个参数 $foreignPivotKey 表示当前模型类在中间表中的外键，默认拼接结果是 tag_id，和我们在数据表中定义的一样，所以这里不需要额外指定。</p><p>第五个参数 $relatedPivotKey 表示默认是通过 $name 和 _id 组合而来，表示中间表中的关联ID字段，这里组合结果是 taggable_id，和我们定义的一致，也不需要额外指定。</p><p>第六个参数 $parentKey 默认表示当前模型类的主键 ID，即与中间表中 tag_id 关联的字段。</p><p>第七个参数 $relatedKey 表示关联模型类的主键 ID，这个因 $related 指定的模型而定。</p><p>如果你不是按照默认约定的规则定义的数据库字段，需要明确每一个参数的含义，然后传入对应的参数值，和之前一样，对新手来说，还是按照默认约定来比较好，免得出错。</p><p>定义好上述关联关系后，就可以查询指定标签模型上关联的文章/页面了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$tag</span> = Tag::with(<span class="string">&#x27;posts&#x27;</span>, <span class="string">&#x27;pages&#x27;</span>)-&gt;findOrFail(<span class="number">53</span>);</span><br><span class="line"><span class="variable">$posts</span> = <span class="variable">$tag</span>-&gt;posts;</span><br><span class="line"><span class="variable">$pages</span> = <span class="variable">$tag</span>-&gt;pages;</span><br></pre></td></tr></table></figure><p>返回的结果都是对应的模型实例集合。</p><h2 id="定义相对的关联关系-2"><a href="#定义相对的关联关系-2" class="headerlink" title="定义相对的关联关系"></a>定义相对的关联关系</h2><p>最后，我们还可以在 Post 模型类或 Page 模型类中通过 Eloquent 提供的 morphToMany 方法定义该模型与 Tag 模型的关联关系（两个模型类中定义的方法完全一样）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;morphToMany(Tag::class, <span class="string">&#x27;taggable&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为我们遵循和 Eloquent 底层默认的约定，所以指定很少的参数就可以定义多对多的多态关联，morphToMany 方法的完整签名如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">morphToMany</span>(<span class="params"><span class="variable">$related</span>, <span class="variable">$name</span>, <span class="variable">$table</span> = <span class="literal">null</span>, <span class="variable">$foreignPivotKey</span> = <span class="literal">null</span>, <span class="variable">$relatedPivotKey</span> = <span class="literal">null</span>, <span class="variable">$parentKey</span> = <span class="literal">null</span>, <span class="variable">$relatedKey</span> = <span class="literal">null</span>, <span class="variable">$inverse</span> = <span class="literal">false</span></span>)</span></span><br></pre></td></tr></table></figure><p>其中前七个参数和 morphedByMany 方法含义一致，只不过针对的关联模型对调过来，最后一个参数 $inverse 表示定义的是否是相对的关联关系，默认是 false。如果你是不按套路出牌自定义的字段，需要搞清楚以上参数的含义并传入自定义的参数值。</p><p>定义好上述关联关系后，就可以通过 Post 模型或 Page 模型获取对应的标签信息了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with(<span class="string">&#x27;tags&#x27;</span>)-&gt;findOrFail(<span class="number">6</span>);</span><br><span class="line"><span class="variable">$tags</span> = <span class="variable">$post</span>-&gt;tags;</span><br></pre></td></tr></table></figure><p>返回的结果也是模型集合：<br><img src="https://upload.anitoys.com/hellocode/20210324235152.jpg" alt="img"><br>对应的底层查询 SQL 语句是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  `tags`.<span class="operator">*</span>,</span><br><span class="line">  `taggables`.`taggable_id` <span class="keyword">as</span> `pivot_taggable_id`,</span><br><span class="line">  `taggables`.`tag_id` <span class="keyword">as</span> `pivot_tag_id`,</span><br><span class="line">  `taggables`.`taggable_type` <span class="keyword">as</span> `pivot_taggable_type`</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `tags`</span><br><span class="line">  <span class="keyword">inner</span> <span class="keyword">join</span> `taggables` <span class="keyword">on</span> `tags`.`id` <span class="operator">=</span> `taggables`.`tag_id`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  `taggables`.`taggable_id` <span class="keyword">in</span> (<span class="number">6</span>)</span><br><span class="line">  <span class="keyword">and</span> `taggables`.`taggable_type` <span class="operator">=</span> &quot;App\Post&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="关联查询"><a href="#关联查询" class="headerlink" title="关联查询"></a>关联查询</h1><p>关于关联查询，我们在前面介绍关联关系定义的时候已经穿插着介绍过，这里简单回顾下。在 Eloquent 模型上进行关联查询主要分为两种方式，一种是懒惰式加载（动态属性），一种是渴求式加载（通过with方法）。从性能上来说，渴求式加载更优，因为它会提前从数据库一次性查询所有关联数据，而懒惰式加载在每次查询动态属性的时候才会去执行查询，会多次连接数据库，性能上差一些（数据库操作主要开销在数据库连接上，所以在开发过程中如果想优化性能，尽量减少频繁连接数据库）</p><h2 id="懒惰式加载"><a href="#懒惰式加载" class="headerlink" title="懒惰式加载"></a>懒惰式加载</h2><p>下面这种方式就是懒惰式加载：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$author</span> = <span class="variable">$post</span>-&gt;author;</span><br></pre></td></tr></table></figure><p>每次访问 author 属性都会执行一次数据库查询，如果返回的文章结果是列表的话，需要遍历获取作者信息，假设要循环 N 次的话，加上文章模型本身的获取，总共需要进行 N + 1 次查询，而 PHP 对数据库的连接是短连接，每次都要重新连接数据库，所以从性能角度考虑不建议使用这种方式。</p><p>另外，如果访问的是模型实例上的 author() 方法时，返回的不是用户实例了，而是一个关联关系实例，该实例注入了查询构建器，所以你可以在其基础上通过方法链的方式构建查询构建器进行更加复杂的查询，我们以一个一对多的查询为例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = User::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$posts</span> = <span class="variable">$user</span>-&gt;posts()-&gt;where(<span class="string">&#x27;views&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="number">0</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>这样，我们就可以过滤出该用户发布的文章中浏览数大于 1 的结果。</p><h2 id="基于关联查询过滤模型实例"><a href="#基于关联查询过滤模型实例" class="headerlink" title="基于关联查询过滤模型实例"></a>基于关联查询过滤模型实例</h2><h3 id="有结果过滤"><a href="#有结果过滤" class="headerlink" title="有结果过滤"></a>有结果过滤</h3><p>有的时候，可能需要根据关联查询的结果来过滤查询结果，比如我们想要获取所有发布过文章的用户，可以这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::has(<span class="string">&#x27;posts&#x27;</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>返回的是模型实例集合：<br><img src="https://upload.anitoys.com/hellocode/20210324235200.jpg" alt="img"><br>底层对应的是一个 EXISTS 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `users`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      `posts`</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      `users`.`id` <span class="operator">=</span> `posts`.`user_id`</span><br><span class="line">      <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">and</span> `email_verified_at` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>如果你想要进一步过滤发布文章数量大于 1 的用户，可以带上查询条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::has(<span class="string">&#x27;posts&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="number">1</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>底层执行的 SQL 查询语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `users`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      `posts`</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      `users`.`id` <span class="operator">=</span> `posts`.`user_id`</span><br><span class="line">      <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line">  ) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">and</span> `email_verified_at` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>你甚至还可以通过嵌套关联查询的方式过滤发布的文章有评论的用户：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::has(<span class="string">&#x27;posts.comments&#x27;</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>其实也就是一个嵌套的 EXISTS 查询：<br><img src="https://upload.anitoys.com/hellocode/20210324235208.jpg" alt="img"><br>此外，还有一个 orHas 方法，顾名思义，它会执行一个 OR 查询，比如我们想要过滤包含评论或标签的文章：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = Post::has(<span class="string">&#x27;comments&#x27;</span>)-&gt;orHas(<span class="string">&#x27;tags&#x27;</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>如果你想要通过更复杂的关联查询过滤模型实例，还可以通过 whereHas/orWhereHas 方法基于闭包函数定义查询条件，比如我们想要过滤发布文章标题中包含「Laravel学院」的所有用户：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::whereHas(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure><p>底层执行的 SQL 查询语句如下：<br><img src="https://upload.anitoys.com/hellocode/20210324235215.jpg" alt="img"><br>如果你想进一步过滤出文章标题和评论都包含「Laravel学院」的用户，可以在上述闭包函数中通过查询构建器进一步指定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::whereHas(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>)</span><br><span class="line">       -&gt;whereExists(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)  </span>&#123;</span><br><span class="line">          <span class="variable">$query</span>-&gt;from(<span class="string">&#x27;comments&#x27;</span>)</span><br><span class="line">              -&gt;whereRaw(<span class="string">&#x27;`posts`.`id` = `comments`.`commentable_id`&#x27;</span>)</span><br><span class="line">              -&gt;where(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>)</span><br><span class="line">              -&gt;where(<span class="string">&#x27;commentable_type&#x27;</span>, Post::class)</span><br><span class="line">              -&gt;whereNull(<span class="string">&#x27;deleted_at&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure><p>如果你想过滤文章标题或评论都包含「Laravel学院」的用户，将 whereExists 换成 orWhereExists 方法即可：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::whereHas(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>)</span><br><span class="line">       -&gt;orWhereExists(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>)  </span>&#123;</span><br><span class="line">          <span class="variable">$query</span>-&gt;from(<span class="string">&#x27;comments&#x27;</span>)</span><br><span class="line">              -&gt;whereRaw(<span class="string">&#x27;`posts`.`id` = `comments`.`commentable_id`&#x27;</span>)</span><br><span class="line">              -&gt;where(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>)</span><br><span class="line">              -&gt;where(<span class="string">&#x27;commentable_type&#x27;</span>, Post::class)</span><br><span class="line">              -&gt;whereNull(<span class="string">&#x27;deleted_at&#x27;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure><p>如果不想自己构造查询构建器，还可以通过方法链的方式实现上述同样的功能：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// and </span></span><br><span class="line"><span class="variable">$users</span> = User::whereHas(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>);</span><br><span class="line">&#125;)-&gt;whereHas(<span class="string">&#x27;posts.comments&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br><span class="line"></span><br><span class="line"><span class="comment">// or    </span></span><br><span class="line"><span class="variable">$users</span> = User::whereHas(<span class="string">&#x27;posts&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>);</span><br><span class="line">&#125;)-&gt;orWhereHas(<span class="string">&#x27;posts.comments&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>);</span><br><span class="line">&#125;)-&gt;get();</span><br></pre></td></tr></table></figure><h3 id="无结果过滤"><a href="#无结果过滤" class="headerlink" title="无结果过滤"></a>无结果过滤</h3><p>与 has/orHas 方法相对的，还有一对 doesntHave/orDoesntHave 方法。很显然，它们用于过滤不包含对应关联结果的模型实例。比如我们想要那些没有发布过文章的用户，可以通过 doesntHave 方法实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::doesntHave(<span class="string">&#x27;posts&#x27;</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>获取的结果也是模型实例集合：<br><img src="https://upload.anitoys.com/hellocode/20210324235222.jpg" alt="img"><br>底层执行的 SQL 语句一个 NOT EXISTS 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `users`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  <span class="keyword">not</span> <span class="keyword">exists</span> (</span><br><span class="line">    <span class="keyword">select</span></span><br><span class="line">      <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">      `posts`</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">      `users`.`id` <span class="operator">=</span> `posts`.`user_id`</span><br><span class="line">      <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line">  )</span><br><span class="line">  <span class="keyword">and</span> `email_verified_at` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>如果想要获取没有评论或没有标签的文章，可以结合 doesntHave 和 orDoesntHave 方法实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = Post::doesntHave(<span class="string">&#x27;comments&#x27;</span>)-&gt;doesntHave(<span class="string">&#x27;tags&#x27;</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>对应的 SQL 语句是：<br><img src="https://upload.anitoys.com/hellocode/20210324235229.jpg" alt="img"><br>和 whereHas 方法和 orWhereHas 方法相对的，也有 whereDoesntHave 和 orWhereDoesntHave 方法，使用方法一样，这里就不再赘述了。</p><h2 id="统计关联模型"><a href="#统计关联模型" class="headerlink" title="统计关联模型"></a>统计关联模型</h2><p>我们还可以通过 Eloquent 提供的 withCount 方法在不加载关联模型的情况下统计关联结果的数量。比如我们想要统计某篇文章的评论数，可以这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::withCount(<span class="string">&#x27;comments&#x27;</span>)-&gt;findOrFail(<span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>我们查看下返回的 $post 模型实例的数据结构：<br><img src="https://upload.anitoys.com/hellocode/20210324235451.jpg" alt="img"><br>其中包含了 comments_count 字段，通过这个字段就可以访问该文章的评论数。如果要统计其它关联模型结果数量字段，可以依次类推，对应字段都是 {relation}_count 结构。</p><blockquote><p>注：实际开发中为了提高查询性能，我们往往是在 posts 表中冗余提供一个 comments_count 字段，每新增一条评论，该字段值加 1，查询的时候直接取该字段即可，从而提高查询的性能。</p></blockquote><p>此外，你还可以通过数组传递多个关联关系一次统计多个字段，还可以通过闭包函数指定对应统计的过滤条件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::withCount([<span class="string">&#x27;tags&#x27;</span>, <span class="string">&#x27;comments&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院&#x27;</span>)</span><br><span class="line">        -&gt;orderBy(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line">&#125;])-&gt;findOrFail(<span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>甚至还可以为统计字段设置别名，以便可以从不同维度统计某个字段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::withCount([</span><br><span class="line">    <span class="string">&#x27;comments&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;comments as pending_comments&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span>(<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;status&#x27;</span>, Comment::PENDING);</span><br><span class="line">    &#125;</span><br><span class="line">])-&gt;findOrFail(<span class="number">32</span>);</span><br></pre></td></tr></table></figure><p>对应的返回结果如下：<br><img src="https://upload.anitoys.com/hellocode/20210324235242.jpg" alt="img"><br>这个功能用于不考虑性能的场景进行快速查询还是很方便的，但如果对性能有较高要求，则不推荐使用，毕竟是要执行多次查询才能逐个统计出来。</p><h2 id="渴求式加载-1"><a href="#渴求式加载-1" class="headerlink" title="渴求式加载"></a>渴求式加载</h2><p>我们在前面已经介绍过，渴求式加载通过 with 方法实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with(<span class="string">&#x27;author&#x27;</span>)-&gt;findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$author</span> = <span class="variable">$post</span>-&gt;author;</span><br></pre></td></tr></table></figure><p>渴求式加载会在查询到模型实例结果后，通过 IN 查询获取关联结果，并将其附着到对应的模型实例上，在后面访问的时候不会再对数据库进行查询。所以不管模型实例有多少个，关联结果只会查询一次，加上模型本身查询总共是两次查询，在列表查询时，大大减少了对数据库的连接查询次数，因而有更好的性能表现，推荐使用。</p><p>渴求式加载支持一次加载多个关联模型（参数名对应相应的关联方法名）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$posts</span> = Post::with(<span class="string">&#x27;author&#x27;</span>, <span class="string">&#x27;comments&#x27;</span>, <span class="string">&#x27;tags&#x27;</span>)-&gt;findOrFail(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>返回的数据格式如下：<br><img src="https://upload.anitoys.com/hellocode/20210324235248.jpg" alt="img"><br>此外，渴求式加载还支持嵌套查询，比如我们想要访问文章作者的扩展表信息，可以这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with(<span class="string">&#x27;author.profile&#x27;</span>)-&gt;findOrFail(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>这样就可以嵌套获取到 profile 表记录的信息：<br><img src="https://upload.anitoys.com/hellocode/20210324235519.jpg" alt="img"><br>这里会涉及到三个 SQL 查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `posts` <span class="keyword">where</span> `posts`.`id` <span class="operator">=</span> ? <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span> limit <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `users` <span class="keyword">where</span> `users`.`id` <span class="keyword">in</span> (?) <span class="keyword">and</span> `email_verified_at` <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> `user_profiles` <span class="keyword">where</span> `user_profiles`.`user_id` <span class="keyword">in</span> (?);</span><br></pre></td></tr></table></figure><p>你还可以通过 with 方法指定要加载的字段：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with(<span class="string">&#x27;author:id,name&#x27;</span>)-&gt;findOrFail(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>注：使用此特性 id 字段必须列出。</p><p>在渴求式加载中，也可以通过闭包传入额外的约束条件，只不过这个约束条件是对关联模型自身的过滤，不影响目标模型的查询：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::with([<span class="string">&#x27;comments&#x27;</span> =&gt; <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$query</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$query</span>-&gt;where(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>)</span><br><span class="line">        -&gt;orderBy(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line">&#125;])-&gt;where(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="number">5</span>)-&gt;get();</span><br></pre></td></tr></table></figure><p>底层执行的 SQL 语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `posts`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  `id` <span class="operator">&lt;</span> <span class="number">5</span></span><br><span class="line">  <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `comments`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  `comments`.`commentable_id` <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">  <span class="keyword">and</span> `comments`.`commentable_type` <span class="operator">=</span> &quot;App\Post&quot;</span><br><span class="line">  <span class="keyword">and</span> `content` <span class="keyword">like</span> &quot;Laravel学院%&quot;</span><br><span class="line">  <span class="keyword">and</span> `comments`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">  `created_at` <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h2 id="懒惰渴求式加载"><a href="#懒惰渴求式加载" class="headerlink" title="懒惰渴求式加载"></a>懒惰渴求式加载</h2><p>有时候，你可能觉得一次性加载所有关联数据有点浪费，对于特定条件下才使用的数据我们可以通过动态条件判断进行渴求式加载或者延迟加载。我们将这种加载叫做懒惰渴求式加载，这种加载可以通过 load 方法实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$users</span> = User::all();</span><br><span class="line"><span class="variable">$condition</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$condition</span>) &#123;</span><br><span class="line">    <span class="variable">$users</span>-&gt;load(<span class="string">&#x27;posts&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒惰渴求式加载也是渴求式加载，只不过是在需要的时候才去加载，所以加上了「懒惰」这个修饰词，底层执行的 SQL 查询语句和渴求式加载是一样的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">  <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  `posts`</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  `posts`.`user_id` <span class="keyword">in</span> (?, ?, ?, ?, ?)</span><br><span class="line">  <span class="keyword">and</span> `posts`.`deleted_at` <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line">和渴求式加载一样，它也支持通过闭包传递额外的约束条件：</span><br><span class="line"></span><br><span class="line">$posts <span class="operator">=</span> Post::<span class="keyword">where</span>(<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;&lt;=&#x27;</span>, <span class="number">3</span>)<span class="operator">-</span><span class="operator">&gt;</span><span class="keyword">get</span>();</span><br><span class="line">$posts-&gt;load([&#x27;comments&#x27; =&gt; function ($query) &#123;</span><br><span class="line">    $query<span class="operator">-</span><span class="operator">&gt;</span><span class="keyword">where</span>(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;like&#x27;</span>, <span class="string">&#x27;Laravel学院%&#x27;</span>)</span><br><span class="line">        <span class="operator">-</span><span class="operator">&gt;</span>orderBy(<span class="string">&#x27;created_at&#x27;</span>, <span class="string">&#x27;desc&#x27;</span>);</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure><h1 id="关联插入与更新"><a href="#关联插入与更新" class="headerlink" title="关联插入与更新"></a>关联插入与更新</h1><h2 id="一对多关联记录插入"><a href="#一对多关联记录插入" class="headerlink" title="一对多关联记录插入"></a>一对多关联记录插入</h2><p>新增关联模型的时候，可以在父模型上调用相应方法直接插入记录到数据库，这样做的好处是不需要指定关联模型与父模型的外键关联字段值，Eloquent 底层会自动判断并设置。比如，如果我们要在某篇文章上新增一条评论可以这么做：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$faker</span> = \Faker\Factory::create();</span><br><span class="line"><span class="variable">$comment</span> = <span class="keyword">new</span> Comment();</span><br><span class="line"><span class="variable">$comment</span>-&gt;content = <span class="variable">$faker</span>-&gt;paragraph;</span><br><span class="line"><span class="variable">$comment</span>-&gt;user_id = mt_rand(<span class="number">1</span>, <span class="number">15</span>);</span><br><span class="line"><span class="variable">$post</span>-&gt;comments()-&gt;save(<span class="variable">$comment</span>);</span><br></pre></td></tr></table></figure><p>Eloquent 底层会自动帮我们维护 commentable_id 和 commentable_type 字段。</p><p>还可以通过 saveMany 方法一次插入多条关联记录，前提是为关联模型配置了批量赋值，比如我们为 Comment 模型类配置白名单 $fillable 属性如下（你也可以不配置批量赋值，但是需要多次实例化并逐个设置评论模型属性值，很麻烦）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="variable">$fillable</span> = [</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;user_id&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这样我们就可以批量插入文章评论数据了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$faker</span> = \Faker\Factory::create();</span><br><span class="line"><span class="variable">$post</span>-&gt;comments()-&gt;saveMany([</span><br><span class="line">    <span class="keyword">new</span> Comment([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)]),</span><br><span class="line">    <span class="keyword">new</span> Comment([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)]),</span><br><span class="line">    <span class="keyword">new</span> Comment([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)]),</span><br><span class="line">    <span class="keyword">new</span> Comment([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)]),</span><br><span class="line">    <span class="keyword">new</span> Comment([<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)])</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>此外，我们还可以通过 create/createMany 方法来插入关联数据，与 save/saveMany 方法不同的是，这两个方法接收的是数组参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入一条记录</span></span><br><span class="line"><span class="variable">$post</span>-&gt;comments()-&gt;create([</span><br><span class="line">    <span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入多条记录</span></span><br><span class="line"><span class="variable">$post</span>-&gt;comments()-&gt;createMany([</span><br><span class="line">    [<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)],</span><br><span class="line">    [<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)],</span><br><span class="line">    [<span class="string">&#x27;content&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;paragraph, <span class="string">&#x27;user_id&#x27;</span> =&gt; mt_rand(<span class="number">1</span>, <span class="number">15</span>)]</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><h2 id="更新一对多所属模型外键字段"><a href="#更新一对多所属模型外键字段" class="headerlink" title="更新一对多所属模型外键字段"></a>更新一对多所属模型外键字段</h2><p>如果是要更新新创建的模型实例所属模型（父模型）的外键字段，比如以 posts 表为例，新增的记录想要更新 user_id 字段，可以这么实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$user</span> = User::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$post</span>-&gt;author()-&gt;associate(<span class="variable">$user</span>);</span><br><span class="line"><span class="variable">$post</span>-&gt;save();</span><br></pre></td></tr></table></figure><p>相对的，如果想要解除当前模型与所属模型之间的关联，可以通过 dissociate 方法来实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>-&gt;author()-&gt;dissociate();</span><br><span class="line"><span class="variable">$post</span>-&gt;save();</span><br></pre></td></tr></table></figure><p>这样，就会将 posts.user_id 置为 null。前提是 user_id 允许为 null，否则会抛出异常。</p><h3 id="空对象模型"><a href="#空对象模型" class="headerlink" title="空对象模型"></a>空对象模型</h3><p>如果外键字段 user_id 允许为空的话，当我们访问 Post 模型上的 author 属性时，默认返回为 null。Eloquent 允许我们为这种空对象定义一个默认的类型，这个对象的类型可以在定义关联关系的时候指定：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class, <span class="string">&#x27;user_id&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        -&gt;withDefault();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，再次访问对应 Post 模型实例的时候返回的就是一个空的 App\User 实例，你还可以为这个对象指定默认属性值：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;belongsTo(User::class, <span class="string">&#x27;user_id&#x27;</span>, <span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;author&#x27;</span>)</span><br><span class="line">        -&gt;withDefault([</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span> =&gt; <span class="number">0</span>,</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span> =&gt; <span class="string">&#x27;游客用户&#x27;</span>,</span><br><span class="line">        ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次访问对应 Post 模型上的 author 属性时，就会返回如下默认的空对象了：<br><img src="https://upload.anitoys.com/hellocode/20210324235300.jpg" alt="img"><br>该特性其实应用了设计模式中的空对象模式，好处是在代码里可以为不同情况编写一致性代码。这样，我们就不需要在每个地方去判断如果文章作者信息为空该如何处理了，因为这种情况下返回的也是一个正常的 User 模型实例。</p><h2 id="多对多关联的绑定与解除"><a href="#多对多关联的绑定与解除" class="headerlink" title="多对多关联的绑定与解除"></a>多对多关联的绑定与解除</h2><p>在插入多对多关联记录的时候，可以通过上面一对多关联记录插入的方式。以文章与标签为例，完全可以这样通过文章模型新增标签模型，同时更新中间表记录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入单条记录</span></span><br><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;save(</span><br><span class="line">    <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;word])</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果中间表接收额外参数可以通过第二个参数传入</span></span><br><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;save(</span><br><span class="line">    <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;word]), </span><br><span class="line">    [<span class="string">&#x27;user_id&#x27;</span> =&gt; <span class="number">1</span>]</span><br><span class="line">); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入多条记录</span></span><br><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;saveMany([</span><br><span class="line">    <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;unique()-&gt;word]),</span><br><span class="line">    <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;unique()-&gt;word]),</span><br><span class="line">    <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;unique()-&gt;word])</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果插入多条记录需要传递中间表额外字段值（通过键值关联对应记录与额外字段）</span></span><br><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;saveMany([</span><br><span class="line">    <span class="number">1</span> =&gt; <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;unique()-&gt;word]),</span><br><span class="line">    <span class="number">2</span> =&gt; <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;unique()-&gt;word]),</span><br><span class="line">    <span class="number">3</span> =&gt; <span class="keyword">new</span> Tag([<span class="string">&#x27;name&#x27;</span> =&gt; <span class="variable">$faker</span>-&gt;unique()-&gt;word])</span><br><span class="line">], [</span><br><span class="line">    <span class="number">1</span> =&gt; [<span class="string">&#x27;user_id&#x27;</span> =&gt; <span class="number">1</span>],</span><br><span class="line">    <span class="number">2</span> =&gt; [<span class="string">&#x27;user_id&#x27;</span> =&gt; <span class="number">2</span>],</span><br><span class="line">    <span class="number">3</span> =&gt; [<span class="string">&#x27;user_id&#x27;</span> =&gt; <span class="number">3</span>],</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>此外，Eloquent 底层还提供了为已有模型之间进行多对多关联的绑定和解除操作。</p><p>还是以文章和标签为例，要将两个本来没有关联关系的记录绑定起来，可以通过 attach 方法实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span> = Post::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$tag</span> = Tag::findOrFail(<span class="number">1</span>);</span><br><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;attach(<span class="variable">$tag</span>-&gt;id);</span><br><span class="line"><span class="comment">// 如果中间表还有其它额外字段，可以通过第二个数组参数传入</span></span><br><span class="line"><span class="comment">// $post-&gt;tags()-&gt;attach($tag-&gt;id, [&#x27;user_id&#x27; =&gt; $userId]);</span></span><br><span class="line"><span class="comment">// 还可以一次绑定多个标签</span></span><br><span class="line"><span class="comment">// $post-&gt;tags()-&gt;attach([1, 2]);</span></span><br><span class="line"><span class="comment">// 如果绑定多个标签，要传递额外字段值，可以这么做：</span></span><br><span class="line"><span class="comment">/*$post-&gt;tags()-&gt;attach([</span></span><br><span class="line"><span class="comment">    1 =&gt; [&#x27;user_id&#x27; =&gt; 1],</span></span><br><span class="line"><span class="comment">    2 =&gt; [&#x27;user_id&#x27; =&gt; 2]</span></span><br><span class="line"><span class="comment">]);*/</span></span><br></pre></td></tr></table></figure><p>如果要解除这个关联关系可以通过 detach 方法实现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;detach(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 如果想要一次解除多个关联，可以这么做：</span></span><br><span class="line"><span class="comment">// $post-&gt;tags()-&gt;detach([1, 2]);</span></span><br><span class="line"><span class="comment">// 如果想要一次解除所有关联，可以这么做：</span></span><br><span class="line"><span class="comment">// $post-&gt;tags()-&gt;detach();</span></span><br></pre></td></tr></table></figure><p>上面这两种方法很方便，但还有更方便的，当我们在更新某篇文章的标签时，往往同时涉及关联标签的绑定和解除。按照上面的逻辑，我们需要先把所有标签记录查询出来，再判断哪些需要绑定关联、哪些需要解除关联、哪些需要插入新的标签记录，然后再通过 attach 和 detach 方法最终完成与对应文章的绑定和解除关联。</p><p>对于那些已存在的标签记录，我们可以通过更高效的方法与文章进行关联关系的绑定和解除，这个方法就是 sync，调用该方法时只需传入刚创建/更新后文章的标签对应 ID 值，至于哪些之前不存在的关联需要绑定，哪些存在的关联需要解除，哪些需要维护现状，交由 Eloquent 底层去判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;sync([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br></pre></td></tr></table></figure><p>如果对应新增数据需要传递额外参数，参考 attach 即可，两者是一样的。</p><p>有时候，你可能仅仅是想要更新中间表字段值，这个时候，可以通过 updateExistingPivot 方法在第二个参数中将需要更新的字段值以关联数组的方式传递过去：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$post</span>-&gt;tags()-&gt;updateExistingPivot(<span class="variable">$tagId</span>, <span class="variable">$attributes</span>);</span><br></pre></td></tr></table></figure><h2 id="触发父模型时间戳更新"><a href="#触发父模型时间戳更新" class="headerlink" title="触发父模型时间戳更新"></a>触发父模型时间戳更新</h2><p>当一个模型归属于另外一个模型时，例如 Comment 模型归属于 Post 模型，当子模型更新时，父模型的更新时间也同步更新往往很有用，比如在有新评论时触发文章页缓存更新，或者通知搜索引擎页面有更新等等。Eloquent 提供了这种同步机制帮助我们更新子模型时触发父模型的更新时间 updated_at 字段值更新，要让该机制生效，需要在子模型中配置 $touches 属性：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要触发更新的父级关联关系</span></span><br><span class="line"><span class="keyword">protected</span> <span class="variable">$touches</span> = [</span><br><span class="line">    <span class="string">&#x27;commentable&#x27;</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>属性值是对应关联方法的名称，支持配置多个关联关系。下面我们简单演示下，以 id=31 的评论记录为例，对应的模型数据及所属文章模型数据如下：<br><img src="https://upload.anitoys.com/hellocode/20210324235308.jpg" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们所熟知的 MySQL、SQL Server、Oracle 都是关系型数据库，何谓关系型数据库？简单来说就是数据表之间存在关联关系。到目前为止，我们介绍的所有 Eloquent 模型操作都是针对单表的，接下来我们将花三篇左右的篇幅来给大家介绍如何在 Eloquent 模型</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>健身干货</title>
    <link href="https://blog.wangk.cn/2018/09/05/%E5%81%A5%E8%BA%AB%E5%B9%B2%E8%B4%A7/"/>
    <id>https://blog.wangk.cn/2018/09/05/%E5%81%A5%E8%BA%AB%E5%B9%B2%E8%B4%A7/</id>
    <published>2018-09-05T09:09:22.000Z</published>
    <updated>2021-03-15T02:34:38.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="健身干货"><a href="#健身干货" class="headerlink" title="健身干货"></a>健身干货</h1><ul><li>1.仰卧起坐练不了腹肌，和腹肌完全没关系，还伤身，尤其抱头，杀伤性无极大。从小学体育课就这么错误的教，健身界和别的国家早都知道的并淘汰的一个错误的动作，中国用了这么多年，直到今年部队大纲才发现并取消。只能呵呵了。</li><li>2.引体向上不是练胳膊的，是练背。俯卧撑练的是胸</li><li>3.节食不能减肥，只会越来越胖，吃的多才能减脂</li><li>4.睡觉也能减肥</li><li>5.只跑步不做力量训练，永远也跑不出有肌肉的好身材</li><li>6.女性跑步跑死腿也跑不粗，跑完变粗那是充血发涨的。</li><li>7.局部减肥是伪科学，没有局部减肥，不要再问我某个部位肉多怎么减，也不要再信什么局部减肥的广告了，那都是骗人的，全球现在也没研究出局部减肥的办法，不知道为什么有那么多人还信。</li><li>8.想永远保持好身材必须要有肌肉，有肌肉才会瘦，运动以外任何方法减脂都是暂时的。</li><li>9.女性只要你不注射药物，永远也练不成肌肉男，只会前凸后翘</li><li>10.没有减肥这个词，只有减脂，只有体型变瘦体重不变才是正确的，很多人却只看体重，请看体型不要看体重。</li><li>11.体重快速下降那减少的是你身体里的水，不是肉。</li><li>12.腹肌有个屁用，体脂率低都会显现，大小不一而已，但你可以练的更大，但必须体脂率低，胖人你就不要练腹肌了，没用，先减脂再说。</li><li>13.跑步减脂请看时间不要看距离，跑步前期消耗的是身体里的糖，不是脂肪，请至少20分钟以上</li><li>14.力量训练胖人减脂轻重量多组数，瘦人增肌大重量少次数。</li><li>15.腿也要练，练下半身才能促睾，睾酮才能帮助你全身的肌肉锻炼，女性没有睾丸，睾酮低的可怜，所以练不出肌肉。</li><li>16.一周5天不锻炼，只集中一两天猛练反而对身体有害，不如别练</li><li>17.肌肉就是肌肉，脂肪就是脂肪，没有不锻炼肌肉就变脂肪的说法，不锻炼肌肉只会松弛变软，也还是瘦肉，再接着锻炼很快就能恢复。</li><li>18.平板支撑练不出腹肌，练的是核心稳定性</li><li>19.出汗多少和训练量和减脂没半毛钱关系，那是体质问题。</li><li>20.夏天晚上尽量不要夜跑，太危险，出门到处都是烧烤摊，一吃一晚上。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;健身干货&quot;&gt;&lt;a href=&quot;#健身干货&quot; class=&quot;headerlink&quot; title=&quot;健身干货&quot;&gt;&lt;/a&gt;健身干货&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;1.仰卧起坐练不了腹肌，和腹肌完全没关系，还伤身，尤其抱头，杀伤性无极大。从小学体育课就这么错误的教，健身界和别</summary>
      
    
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/categories/Laravel/"/>
    
    
    <category term="Laravel" scheme="https://blog.wangk.cn/tags/Laravel/"/>
    
  </entry>
  
  <entry>
    <title>Charles Proxy</title>
    <link href="https://blog.wangk.cn/2018/07/03/CharlesProxy/"/>
    <id>https://blog.wangk.cn/2018/07/03/CharlesProxy/</id>
    <published>2018-07-03T07:34:13.000Z</published>
    <updated>2021-04-29T02:52:32.715Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Charles破解"><a href="#Charles破解" class="headerlink" title="Charles破解"></a>Charles破解</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://www.charlesproxy.com/download/">官方下载地址</a></p><h2 id="破解地址"><a href="#破解地址" class="headerlink" title="破解地址"></a>破解地址</h2><p><a href="https://www.zzzmode.com/mytools/charles/">Charles破解工具</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">描述</span><br><span class="line">此工具用于生成破解后的charles.jar文件，blog介绍: https:&#x2F;&#x2F;blog.zzzmode.com&#x2F;2017&#x2F;05&#x2F;16&#x2F;charles-4.0.2-cracked</span><br><span class="line">用法</span><br><span class="line">输入RegisterName(此名称随意，用于显示 Registered to xxx)，选择本地已安装的版本，点击生成，并下载charles.jar文件</span><br><span class="line">替换本地charles.jar文件</span><br><span class="line">macOS: &#x2F;Applications&#x2F;Charles.app&#x2F;Contents&#x2F;Java&#x2F;charles.jar</span><br><span class="line">Windows: C:\Program Files\Charles\lib\charles.jar</span><br><span class="line">注意</span><br><span class="line">仅供个人学习研究和交流使用，请勿用于任何商业用途。</span><br></pre></td></tr></table></figure><p><a href="https://cdn.jsdelivr.net/gh/wangk-cc/picgo@images/2021/04/29/20210429100444.jar">charles.jar</a></p><h2 id="注册码"><a href="#注册码" class="headerlink" title="注册码"></a>注册码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Charles Proxy License</span><br><span class="line">&#x2F;&#x2F; 适用于Charles任意版本的注册码，谁还会想要使用破解版呢。</span><br><span class="line">&#x2F;&#x2F; Charles 4.6.1目前是最新版，可用。</span><br><span class="line"></span><br><span class="line">Registered Name: https:&#x2F;&#x2F;zhile.io</span><br><span class="line">License Key: 48891cf209c6d32bf4</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Charles破解&quot;&gt;&lt;a href=&quot;#Charles破解&quot; class=&quot;headerlink&quot; title=&quot;Charles破解&quot;&gt;&lt;/a&gt;Charles破解&lt;/h1&gt;&lt;h2 id=&quot;下载地址&quot;&gt;&lt;a href=&quot;#下载地址&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="破解" scheme="https://blog.wangk.cn/categories/%E7%A0%B4%E8%A7%A3/"/>
    
    
    <category term="破解" scheme="https://blog.wangk.cn/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>macOS开发环境配置</title>
    <link href="https://blog.wangk.cn/2017/09/04/macOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>https://blog.wangk.cn/2017/09/04/macOS%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</id>
    <published>2017-09-04T09:13:33.000Z</published>
    <updated>2021-03-18T10:43:25.176Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="36d2837019e19f75220b71bb140dd043f9fcb82bad62c1a0af4eeca535ada0ad"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这里有东西被加密了，需要输入密码查看哦。</summary>
    
    
    
    <category term="macOS" scheme="https://blog.wangk.cn/categories/macOS/"/>
    
    
    <category term="macOS" scheme="https://blog.wangk.cn/tags/macOS/"/>
    
  </entry>
  
</feed>
